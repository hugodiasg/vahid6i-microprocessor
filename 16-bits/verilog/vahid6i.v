/* Generated by Yosys 0.27+22 (git sha1 53c0a6b78, gcc 12.2.0-3ubuntu1 -fPIC -Os) */

module alu(a, b, s0, s1, rp_zero, ans);
  wire _00_;
  wire _01_;
  wire _02_;
  wire _03_;
  wire _04_;
  wire _05_;
  wire _06_;
  wire [15:0] _07_;
  wire _08_;
  wire _09_;
  wire [15:0] _10_;
  wire [15:0] _11_;
  wire [15:0] _12_;
  wire [15:0] _13_;
  input [15:0] a;
  wire [15:0] a;
  output [15:0] ans;
  wire [15:0] ans;
  input [15:0] b;
  wire [15:0] b;
  output rp_zero;
  wire rp_zero;
  input s0;
  wire s0;
  input s1;
  wire s1;
  assign _00_ = a == 16'h0000;
  assign _01_ = _00_ ? 1'h1 : 1'h0;
  assign _02_ = ~ s1;
  assign _03_ = ~ s0;
  assign _04_ = _02_ & _03_;
  assign _05_ = ~ s1;
  assign _06_ = _05_ & s0;
  assign _07_ = a + b;
  assign _08_ = ~ s0;
  assign _09_ = s1 & _08_;
  assign _10_ = a - b;
  assign _11_ = _09_ ? _10_ : 16'hzzzz;
  assign _12_ = _06_ ? _07_ : _11_;
  assign _13_ = _04_ ? a : _12_;
  assign rp_zero = _01_;
  assign ans = _13_;
endmodule

module bc(clock, reset, ir_data_out, rf_rp_zero, pc_clr, pc_ld, pc_inc, ir_ld, i_rd, d_addr, d_rd, d_wr, rf_s1, rf_s0, rf_w_data, rf_w_addr, rf_rp_addr, rf_rq_addr, rf_w_wr, rf_rp_rd, rf_rq_rd
, alu_s0, alu_s1);
  reg _00_;
  reg _01_;
  reg [3:0] _02_;
  reg [3:0] _03_;
  reg [3:0] _04_;
  reg _05_;
  reg _06_;
  reg _07_;
  reg _08_;
  reg _09_;
  wire _10_;
  wire _11_;
  wire _12_;
  wire _13_;
  wire _14_;
  wire _15_;
  wire _16_;
  wire _17_;
  wire _18_;
  wire _19_;
  wire _20_;
  wire _21_;
  wire _22_;
  wire _23_;
  wire _24_;
  wire _25_;
  wire [7:0] _26_;
  wire _27_;
  wire _28_;
  wire _29_;
  wire _30_;
  wire [3:0] _31_;
  wire [3:0] _32_;
  wire [3:0] _33_;
  wire _34_;
  wire _35_;
  wire _36_;
  wire _37_;
  wire _38_;
  wire _39_;
  wire _40_;
  wire _41_;
  wire _42_;
  wire _43_;
  wire _44_;
  wire _45_;
  wire _46_;
  wire _47_;
  wire [3:0] _48_;
  wire _49_;
  wire [3:0] _50_;
  wire _51_;
  wire _52_;
  wire [3:0] _53_;
  wire [3:0] _54_;
  reg [3:0] _55_ = 4'h0;
  reg _56_;
  reg _57_;
  reg _58_;
  reg _59_;
  reg _60_;
  reg [7:0] _61_;
  reg _62_;
  reg _63_;
  output alu_s0;
  wire alu_s0;
  output alu_s1;
  wire alu_s1;
  input clock;
  wire clock;
  wire [3:0] current_state;
  output [7:0] d_addr;
  wire [7:0] d_addr;
  output d_rd;
  wire d_rd;
  output d_wr;
  wire d_wr;
  output i_rd;
  wire i_rd;
  input [15:0] ir_data_out;
  wire [15:0] ir_data_out;
  output ir_ld;
  wire ir_ld;
  wire [3:0] next_state;
  output pc_clr;
  wire pc_clr;
  output pc_inc;
  wire pc_inc;
  output pc_ld;
  wire pc_ld;
  input reset;
  wire reset;
  output [3:0] rf_rp_addr;
  wire [3:0] rf_rp_addr;
  output rf_rp_rd;
  wire rf_rp_rd;
  input rf_rp_zero;
  wire rf_rp_zero;
  output [3:0] rf_rq_addr;
  wire [3:0] rf_rq_addr;
  output rf_rq_rd;
  wire rf_rq_rd;
  output rf_s0;
  wire rf_s0;
  output rf_s1;
  wire rf_s1;
  output [3:0] rf_w_addr;
  wire [3:0] rf_w_addr;
  output [7:0] rf_w_data;
  wire [7:0] rf_w_data;
  output rf_w_wr;
  wire rf_w_wr;
  assign _10_ = next_state == 4'h0;
  assign _11_ = next_state == 4'h1;
  assign _12_ = next_state == 4'h2;
  assign _13_ = next_state == 4'h4;
  assign _14_ = next_state == 4'h5;
  assign _15_ = next_state == 4'h6;
  assign _16_ = next_state == 4'h7;
  assign _17_ = next_state == 4'h8;
  assign _18_ = next_state == 4'h9;
  assign _19_ = next_state == 4'ha;
  assign _20_ = next_state == 4'h3;
  function [0:0] \227 ;
    input [0:0] a;
    input [10:0] b;
    input [10:0] s;
    (* parallel_case *)
    casez (s)
      11'b??????????1:
        \227  = b[0:0];
      11'b?????????1?:
        \227  = b[1:1];
      11'b????????1??:
        \227  = b[2:2];
      11'b???????1???:
        \227  = b[3:3];
      11'b??????1????:
        \227  = b[4:4];
      11'b?????1?????:
        \227  = b[5:5];
      11'b????1??????:
        \227  = b[6:6];
      11'b???1???????:
        \227  = b[7:7];
      11'b??1????????:
        \227  = b[8:8];
      11'b?1?????????:
        \227  = b[9:9];
      11'b1??????????:
        \227  = b[10:10];
      default:
        \227  = a;
    endcase
  endfunction
  assign _21_ = \227 (_56_, { _56_, _56_, _56_, _56_, _56_, _56_, _56_, _56_, 3'h1 }, { _20_, _19_, _18_, _17_, _16_, _15_, _14_, _13_, _12_, _11_, _10_ });
  function [0:0] \231 ;
    input [0:0] a;
    input [10:0] b;
    input [10:0] s;
    (* parallel_case *)
    casez (s)
      11'b??????????1:
        \231  = b[0:0];
      11'b?????????1?:
        \231  = b[1:1];
      11'b????????1??:
        \231  = b[2:2];
      11'b???????1???:
        \231  = b[3:3];
      11'b??????1????:
        \231  = b[4:4];
      11'b?????1?????:
        \231  = b[5:5];
      11'b????1??????:
        \231  = b[6:6];
      11'b???1???????:
        \231  = b[7:7];
      11'b??1????????:
        \231  = b[8:8];
      11'b?1?????????:
        \231  = b[9:9];
      11'b1??????????:
        \231  = b[10:10];
      default:
        \231  = a;
    endcase
  endfunction
  assign _22_ = \231 (_57_, { _57_, 1'h1, _57_, _57_, _57_, _57_, _57_, _57_, 2'h0, _57_ }, { _20_, _19_, _18_, _17_, _16_, _15_, _14_, _13_, _12_, _11_, _10_ });
  function [0:0] \237 ;
    input [0:0] a;
    input [10:0] b;
    input [10:0] s;
    (* parallel_case *)
    casez (s)
      11'b??????????1:
        \237  = b[0:0];
      11'b?????????1?:
        \237  = b[1:1];
      11'b????????1??:
        \237  = b[2:2];
      11'b???????1???:
        \237  = b[3:3];
      11'b??????1????:
        \237  = b[4:4];
      11'b?????1?????:
        \237  = b[5:5];
      11'b????1??????:
        \237  = b[6:6];
      11'b???1???????:
        \237  = b[7:7];
      11'b??1????????:
        \237  = b[8:8];
      11'b?1?????????:
        \237  = b[9:9];
      11'b1??????????:
        \237  = b[10:10];
      default:
        \237  = a;
    endcase
  endfunction
  assign _23_ = \237 (_58_, { 1'h0, _58_, _58_, _58_, _58_, _58_, 4'h1, _58_ }, { _20_, _19_, _18_, _17_, _16_, _15_, _14_, _13_, _12_, _11_, _10_ });
  function [0:0] \242 ;
    input [0:0] a;
    input [10:0] b;
    input [10:0] s;
    (* parallel_case *)
    casez (s)
      11'b??????????1:
        \242  = b[0:0];
      11'b?????????1?:
        \242  = b[1:1];
      11'b????????1??:
        \242  = b[2:2];
      11'b???????1???:
        \242  = b[3:3];
      11'b??????1????:
        \242  = b[4:4];
      11'b?????1?????:
        \242  = b[5:5];
      11'b????1??????:
        \242  = b[6:6];
      11'b???1???????:
        \242  = b[7:7];
      11'b??1????????:
        \242  = b[8:8];
      11'b?1?????????:
        \242  = b[9:9];
      11'b1??????????:
        \242  = b[10:10];
      default:
        \242  = a;
    endcase
  endfunction
  assign _24_ = \242 (_59_, { 1'h0, _59_, _59_, _59_, _59_, _59_, 3'h1, _59_, _59_ }, { _20_, _19_, _18_, _17_, _16_, _15_, _14_, _13_, _12_, _11_, _10_ });
  function [0:0] \248 ;
    input [0:0] a;
    input [10:0] b;
    input [10:0] s;
    (* parallel_case *)
    casez (s)
      11'b??????????1:
        \248  = b[0:0];
      11'b?????????1?:
        \248  = b[1:1];
      11'b????????1??:
        \248  = b[2:2];
      11'b???????1???:
        \248  = b[3:3];
      11'b??????1????:
        \248  = b[4:4];
      11'b?????1?????:
        \248  = b[5:5];
      11'b????1??????:
        \248  = b[6:6];
      11'b???1???????:
        \248  = b[7:7];
      11'b??1????????:
        \248  = b[8:8];
      11'b?1?????????:
        \248  = b[9:9];
      11'b1??????????:
        \248  = b[10:10];
      default:
        \248  = a;
    endcase
  endfunction
  assign _25_ = \248 (_60_, { 1'h0, _60_, _60_, _60_, _60_, _60_, 4'h3, _60_ }, { _20_, _19_, _18_, _17_, _16_, _15_, _14_, _13_, _12_, _11_, _10_ });
  function [7:0] \249 ;
    input [7:0] a;
    input [87:0] b;
    input [10:0] s;
    (* parallel_case *)
    casez (s)
      11'b??????????1:
        \249  = b[7:0];
      11'b?????????1?:
        \249  = b[15:8];
      11'b????????1??:
        \249  = b[23:16];
      11'b???????1???:
        \249  = b[31:24];
      11'b??????1????:
        \249  = b[39:32];
      11'b?????1?????:
        \249  = b[47:40];
      11'b????1??????:
        \249  = b[55:48];
      11'b???1???????:
        \249  = b[63:56];
      11'b??1????????:
        \249  = b[71:64];
      11'b?1?????????:
        \249  = b[79:72];
      11'b1??????????:
        \249  = b[87:80];
      default:
        \249  = a;
    endcase
  endfunction
  assign _26_ = \249 (_61_, { _61_, _61_, _61_, _61_, _61_, _61_, ir_data_out[7:0], ir_data_out[7:0], _61_, _61_, _61_ }, { _20_, _19_, _18_, _17_, _16_, _15_, _14_, _13_, _12_, _11_, _10_ });
  function [0:0] \253 ;
    input [0:0] a;
    input [10:0] b;
    input [10:0] s;
    (* parallel_case *)
    casez (s)
      11'b??????????1:
        \253  = b[0:0];
      11'b?????????1?:
        \253  = b[1:1];
      11'b????????1??:
        \253  = b[2:2];
      11'b???????1???:
        \253  = b[3:3];
      11'b??????1????:
        \253  = b[4:4];
      11'b?????1?????:
        \253  = b[5:5];
      11'b????1??????:
        \253  = b[6:6];
      11'b???1???????:
        \253  = b[7:7];
      11'b??1????????:
        \253  = b[8:8];
      11'b?1?????????:
        \253  = b[9:9];
      11'b1??????????:
        \253  = b[10:10];
      default:
        \253  = a;
    endcase
  endfunction
  assign _27_ = \253 (_62_, { _62_, _62_, _62_, _62_, _62_, _62_, _62_, 3'h4, _62_ }, { _20_, _19_, _18_, _17_, _16_, _15_, _14_, _13_, _12_, _11_, _10_ });
  function [0:0] \257 ;
    input [0:0] a;
    input [10:0] b;
    input [10:0] s;
    (* parallel_case *)
    casez (s)
      11'b??????????1:
        \257  = b[0:0];
      11'b?????????1?:
        \257  = b[1:1];
      11'b????????1??:
        \257  = b[2:2];
      11'b???????1???:
        \257  = b[3:3];
      11'b??????1????:
        \257  = b[4:4];
      11'b?????1?????:
        \257  = b[5:5];
      11'b????1??????:
        \257  = b[6:6];
      11'b???1???????:
        \257  = b[7:7];
      11'b??1????????:
        \257  = b[8:8];
      11'b?1?????????:
        \257  = b[9:9];
      11'b1??????????:
        \257  = b[10:10];
      default:
        \257  = a;
    endcase
  endfunction
  assign _28_ = \257 (_63_, { _63_, _63_, _63_, _63_, _63_, _63_, 1'h1, _63_, 2'h0, _63_ }, { _20_, _19_, _18_, _17_, _16_, _15_, _14_, _13_, _12_, _11_, _10_ });
  function [0:0] \262 ;
    input [0:0] a;
    input [10:0] b;
    input [10:0] s;
    (* parallel_case *)
    casez (s)
      11'b??????????1:
        \262  = b[0:0];
      11'b?????????1?:
        \262  = b[1:1];
      11'b????????1??:
        \262  = b[2:2];
      11'b???????1???:
        \262  = b[3:3];
      11'b??????1????:
        \262  = b[4:4];
      11'b?????1?????:
        \262  = b[5:5];
      11'b????1??????:
        \262  = b[6:6];
      11'b???1???????:
        \262  = b[7:7];
      11'b??1????????:
        \262  = b[8:8];
      11'b?1?????????:
        \262  = b[9:9];
      11'b1??????????:
        \262  = b[10:10];
      default:
        \262  = a;
    endcase
  endfunction
  assign _29_ = \262 (_00_, { _00_, _00_, _00_, 3'h2, _00_, 1'h0, _00_, _00_, _00_ }, { _20_, _19_, _18_, _17_, _16_, _15_, _14_, _13_, _12_, _11_, _10_ });
  function [0:0] \267 ;
    input [0:0] a;
    input [10:0] b;
    input [10:0] s;
    (* parallel_case *)
    casez (s)
      11'b??????????1:
        \267  = b[0:0];
      11'b?????????1?:
        \267  = b[1:1];
      11'b????????1??:
        \267  = b[2:2];
      11'b???????1???:
        \267  = b[3:3];
      11'b??????1????:
        \267  = b[4:4];
      11'b?????1?????:
        \267  = b[5:5];
      11'b????1??????:
        \267  = b[6:6];
      11'b???1???????:
        \267  = b[7:7];
      11'b??1????????:
        \267  = b[8:8];
      11'b?1?????????:
        \267  = b[9:9];
      11'b1??????????:
        \267  = b[10:10];
      default:
        \267  = a;
    endcase
  endfunction
  assign _30_ = \267 (_01_, { _01_, _01_, _01_, 3'h0, _01_, 1'h1, _01_, _01_, _01_ }, { _20_, _19_, _18_, _17_, _16_, _15_, _14_, _13_, _12_, _11_, _10_ });
  function [3:0] \268 ;
    input [3:0] a;
    input [43:0] b;
    input [10:0] s;
    (* parallel_case *)
    casez (s)
      11'b??????????1:
        \268  = b[3:0];
      11'b?????????1?:
        \268  = b[7:4];
      11'b????????1??:
        \268  = b[11:8];
      11'b???????1???:
        \268  = b[15:12];
      11'b??????1????:
        \268  = b[19:16];
      11'b?????1?????:
        \268  = b[23:20];
      11'b????1??????:
        \268  = b[27:24];
      11'b???1???????:
        \268  = b[31:28];
      11'b??1????????:
        \268  = b[35:32];
      11'b?1?????????:
        \268  = b[39:36];
      11'b1??????????:
        \268  = b[43:40];
      default:
        \268  = a;
    endcase
  endfunction
  assign _31_ = \268 (_02_, { _02_, _02_, _02_, ir_data_out[3:0], ir_data_out[11:8], ir_data_out[3:0], _02_, ir_data_out[11:8], _02_, _02_, _02_ }, { _20_, _19_, _18_, _17_, _16_, _15_, _14_, _13_, _12_, _11_, _10_ });
  function [3:0] \269 ;
    input [3:0] a;
    input [43:0] b;
    input [10:0] s;
    (* parallel_case *)
    casez (s)
      11'b??????????1:
        \269  = b[3:0];
      11'b?????????1?:
        \269  = b[7:4];
      11'b????????1??:
        \269  = b[11:8];
      11'b???????1???:
        \269  = b[15:12];
      11'b??????1????:
        \269  = b[19:16];
      11'b?????1?????:
        \269  = b[23:20];
      11'b????1??????:
        \269  = b[27:24];
      11'b???1???????:
        \269  = b[31:28];
      11'b??1????????:
        \269  = b[35:32];
      11'b?1?????????:
        \269  = b[39:36];
      11'b1??????????:
        \269  = b[43:40];
      default:
        \269  = a;
    endcase
  endfunction
  assign _32_ = \269 (_03_, { _03_, _03_, ir_data_out[11:8], ir_data_out[11:8], _03_, ir_data_out[11:8], ir_data_out[11:8], _03_, _03_, _03_, _03_ }, { _20_, _19_, _18_, _17_, _16_, _15_, _14_, _13_, _12_, _11_, _10_ });
  function [3:0] \270 ;
    input [3:0] a;
    input [43:0] b;
    input [10:0] s;
    (* parallel_case *)
    casez (s)
      11'b??????????1:
        \270  = b[3:0];
      11'b?????????1?:
        \270  = b[7:4];
      11'b????????1??:
        \270  = b[11:8];
      11'b???????1???:
        \270  = b[15:12];
      11'b??????1????:
        \270  = b[19:16];
      11'b?????1?????:
        \270  = b[23:20];
      11'b????1??????:
        \270  = b[27:24];
      11'b???1???????:
        \270  = b[31:28];
      11'b??1????????:
        \270  = b[35:32];
      11'b?1?????????:
        \270  = b[39:36];
      11'b1??????????:
        \270  = b[43:40];
      default:
        \270  = a;
    endcase
  endfunction
  assign _33_ = \270 (_04_, { _04_, _04_, _04_, ir_data_out[7:4], _04_, ir_data_out[7:4], _04_, _04_, _04_, _04_, _04_ }, { _20_, _19_, _18_, _17_, _16_, _15_, _14_, _13_, _12_, _11_, _10_ });
  function [0:0] \277 ;
    input [0:0] a;
    input [10:0] b;
    input [10:0] s;
    (* parallel_case *)
    casez (s)
      11'b??????????1:
        \277  = b[0:0];
      11'b?????????1?:
        \277  = b[1:1];
      11'b????????1??:
        \277  = b[2:2];
      11'b???????1???:
        \277  = b[3:3];
      11'b??????1????:
        \277  = b[4:4];
      11'b?????1?????:
        \277  = b[5:5];
      11'b????1??????:
        \277  = b[6:6];
      11'b???1???????:
        \277  = b[7:7];
      11'b??1????????:
        \277  = b[8:8];
      11'b?1?????????:
        \277  = b[9:9];
      11'b1??????????:
        \277  = b[10:10];
      default:
        \277  = a;
    endcase
  endfunction
  assign _34_ = \277 (_05_, { _05_, _05_, _05_, 3'h7, _05_, 3'h4, _05_ }, { _20_, _19_, _18_, _17_, _16_, _15_, _14_, _13_, _12_, _11_, _10_ });
  function [0:0] \284 ;
    input [0:0] a;
    input [10:0] b;
    input [10:0] s;
    (* parallel_case *)
    casez (s)
      11'b??????????1:
        \284  = b[0:0];
      11'b?????????1?:
        \284  = b[1:1];
      11'b????????1??:
        \284  = b[2:2];
      11'b???????1???:
        \284  = b[3:3];
      11'b??????1????:
        \284  = b[4:4];
      11'b?????1?????:
        \284  = b[5:5];
      11'b????1??????:
        \284  = b[6:6];
      11'b???1???????:
        \284  = b[7:7];
      11'b??1????????:
        \284  = b[8:8];
      11'b?1?????????:
        \284  = b[9:9];
      11'b1??????????:
        \284  = b[10:10];
      default:
        \284  = a;
    endcase
  endfunction
  assign _35_ = \284 (_06_, { _06_, _06_, 2'h3, _06_, 2'h3, _06_, 2'h0, _06_ }, { _20_, _19_, _18_, _17_, _16_, _15_, _14_, _13_, _12_, _11_, _10_ });
  function [0:0] \289 ;
    input [0:0] a;
    input [10:0] b;
    input [10:0] s;
    (* parallel_case *)
    casez (s)
      11'b??????????1:
        \289  = b[0:0];
      11'b?????????1?:
        \289  = b[1:1];
      11'b????????1??:
        \289  = b[2:2];
      11'b???????1???:
        \289  = b[3:3];
      11'b??????1????:
        \289  = b[4:4];
      11'b?????1?????:
        \289  = b[5:5];
      11'b????1??????:
        \289  = b[6:6];
      11'b???1???????:
        \289  = b[7:7];
      11'b??1????????:
        \289  = b[8:8];
      11'b?1?????????:
        \289  = b[9:9];
      11'b1??????????:
        \289  = b[10:10];
      default:
        \289  = a;
    endcase
  endfunction
  assign _36_ = \289 (_07_, { _07_, _07_, _07_, 1'h1, _07_, 1'h1, _07_, _07_, 2'h0, _07_ }, { _20_, _19_, _18_, _17_, _16_, _15_, _14_, _13_, _12_, _11_, _10_ });
  function [0:0] \292 ;
    input [0:0] a;
    input [10:0] b;
    input [10:0] s;
    (* parallel_case *)
    casez (s)
      11'b??????????1:
        \292  = b[0:0];
      11'b?????????1?:
        \292  = b[1:1];
      11'b????????1??:
        \292  = b[2:2];
      11'b???????1???:
        \292  = b[3:3];
      11'b??????1????:
        \292  = b[4:4];
      11'b?????1?????:
        \292  = b[5:5];
      11'b????1??????:
        \292  = b[6:6];
      11'b???1???????:
        \292  = b[7:7];
      11'b??1????????:
        \292  = b[8:8];
      11'b?1?????????:
        \292  = b[9:9];
      11'b1??????????:
        \292  = b[10:10];
      default:
        \292  = a;
    endcase
  endfunction
  assign _37_ = \292 (_08_, { _08_, _08_, _08_, 1'h0, _08_, 1'h1, _08_, _08_, _08_, _08_, _08_ }, { _20_, _19_, _18_, _17_, _16_, _15_, _14_, _13_, _12_, _11_, _10_ });
  function [0:0] \295 ;
    input [0:0] a;
    input [10:0] b;
    input [10:0] s;
    (* parallel_case *)
    casez (s)
      11'b??????????1:
        \295  = b[0:0];
      11'b?????????1?:
        \295  = b[1:1];
      11'b????????1??:
        \295  = b[2:2];
      11'b???????1???:
        \295  = b[3:3];
      11'b??????1????:
        \295  = b[4:4];
      11'b?????1?????:
        \295  = b[5:5];
      11'b????1??????:
        \295  = b[6:6];
      11'b???1???????:
        \295  = b[7:7];
      11'b??1????????:
        \295  = b[8:8];
      11'b?1?????????:
        \295  = b[9:9];
      11'b1??????????:
        \295  = b[10:10];
      default:
        \295  = a;
    endcase
  endfunction
  assign _38_ = \295 (_09_, { _09_, _09_, _09_, 1'h1, _09_, 1'h0, _09_, _09_, _09_, _09_, _09_ }, { _20_, _19_, _18_, _17_, _16_, _15_, _14_, _13_, _12_, _11_, _10_ });
  assign _39_ = current_state == 4'h0;
  assign _40_ = current_state == 4'h1;
  assign _41_ = current_state == 4'h2;
  assign _42_ = ir_data_out[15:12] == 4'h0;
  assign _43_ = ir_data_out[15:12] == 4'h1;
  assign _44_ = ir_data_out[15:12] == 4'h2;
  assign _45_ = ir_data_out[15:12] == 4'h3;
  assign _46_ = ir_data_out[15:12] == 4'h4;
  assign _47_ = ir_data_out[15:12] == 4'h5;
  function [3:0] \344 ;
    input [3:0] a;
    input [23:0] b;
    input [5:0] s;
    (* parallel_case *)
    casez (s)
      6'b?????1:
        \344  = b[3:0];
      6'b????1?:
        \344  = b[7:4];
      6'b???1??:
        \344  = b[11:8];
      6'b??1???:
        \344  = b[15:12];
      6'b?1????:
        \344  = b[19:16];
      6'b1?????:
        \344  = b[23:20];
      default:
        \344  = a;
    endcase
  endfunction
  assign _48_ = \344 (4'h1, 24'h987654, { _47_, _46_, _45_, _44_, _43_, _42_ });
  assign _49_ = current_state == 4'h3;
  assign _50_ = rf_rp_zero ? 4'ha : 4'h1;
  assign _51_ = current_state == 4'h9;
  assign _52_ = current_state == 4'ha;
  function [3:0] \360 ;
    input [3:0] a;
    input [23:0] b;
    input [5:0] s;
    (* parallel_case *)
    casez (s)
      6'b?????1:
        \360  = b[3:0];
      6'b????1?:
        \360  = b[7:4];
      6'b???1??:
        \360  = b[11:8];
      6'b??1???:
        \360  = b[15:12];
      6'b?1????:
        \360  = b[19:16];
      6'b1?????:
        \360  = b[23:20];
      default:
        \360  = a;
    endcase
  endfunction
  assign _53_ = \360 (4'h1, { 4'h1, _50_, _48_, 12'h322 }, { _52_, _51_, _49_, _41_, _40_, _39_ });
  assign _54_ = reset ? 4'h0 : _53_;
  always @(posedge clock)
    _55_ <= next_state;
  always @(posedge clock)
    _56_ <= _21_;
  always @(posedge clock)
    _57_ <= _22_;
  always @(posedge clock)
    _58_ <= _23_;
  always @(posedge clock)
    _59_ <= _24_;
  always @(posedge clock)
    _60_ <= _25_;
  always @(posedge clock)
    _61_ <= _26_;
  always @(posedge clock)
    _62_ <= _27_;
  always @(posedge clock)
    _63_ <= _28_;
  always @(posedge clock)
    _00_ <= _29_;
  always @(posedge clock)
    _01_ <= _30_;
  always @(posedge clock)
    _02_ <= _31_;
  always @(posedge clock)
    _03_ <= _32_;
  always @(posedge clock)
    _04_ <= _33_;
  always @(posedge clock)
    _05_ <= _34_;
  always @(posedge clock)
    _06_ <= _35_;
  always @(posedge clock)
    _07_ <= _36_;
  always @(posedge clock)
    _08_ <= _37_;
  always @(posedge clock)
    _09_ <= _38_;
  assign current_state = _55_;
  assign next_state = _54_;
  assign pc_clr = _56_;
  assign pc_ld = _57_;
  assign pc_inc = _58_;
  assign ir_ld = _59_;
  assign i_rd = _60_;
  assign d_addr = _61_;
  assign d_rd = _62_;
  assign d_wr = _63_;
  assign rf_s1 = _00_;
  assign rf_s0 = _01_;
  assign rf_w_data = ir_data_out[7:0];
  assign rf_w_addr = _02_;
  assign rf_rp_addr = _03_;
  assign rf_rq_addr = _04_;
  assign rf_w_wr = _05_;
  assign rf_rp_rd = _06_;
  assign rf_rq_rd = _07_;
  assign alu_s0 = _08_;
  assign alu_s1 = _09_;
endmodule

module ir(clock, ir_data_in, ir_ld, ir_data_out);
  wire [15:0] _0_;
  reg [15:0] _1_ = 16'hzzzz;
  input clock;
  wire clock;
  input [15:0] ir_data_in;
  wire [15:0] ir_data_in;
  output [15:0] ir_data_out;
  wire [15:0] ir_data_out;
  input ir_ld;
  wire ir_ld;
  assign _0_ = ir_ld ? ir_data_in : _1_;
  always @(posedge clock)
    _1_ <= _0_;
  assign ir_data_out = _1_;
endmodule

module muxf(s1, s0, ans, d_r_data, rf_w_data, w_data);
  wire _0_;
  wire _1_;
  wire _2_;
  wire [15:0] _3_;
  input [15:0] ans;
  wire [15:0] ans;
  input [15:0] d_r_data;
  wire [15:0] d_r_data;
  input [7:0] rf_w_data;
  wire [7:0] rf_w_data;
  input s0;
  wire s0;
  input s1;
  wire s1;
  wire [1:0] s1_s0;
  output [15:0] w_data;
  wire [15:0] w_data;
  assign _0_ = s1_s0 == 2'h0;
  assign _1_ = s1_s0 == 2'h1;
  assign _2_ = s1_s0 == 2'h2;
  function [15:0] \424 ;
    input [15:0] a;
    input [47:0] b;
    input [2:0] s;
    (* parallel_case *)
    casez (s)
      3'b??1:
        \424  = b[15:0];
      3'b?1?:
        \424  = b[31:16];
      3'b1??:
        \424  = b[47:32];
      default:
        \424  = a;
    endcase
  endfunction
  assign _3_ = \424 (16'hzzzz, { 8'h00, rf_w_data, d_r_data, ans }, { _2_, _1_, _0_ });
  assign s1_s0 = { s1, s0 };
  assign w_data = _3_;
endmodule

module pc(clock, pc_inc, pc_clr, pc_ld, ir_inc, i_addr);
  wire [15:0] _0_;
  wire [15:0] _1_;
  wire [15:0] _2_;
  wire [15:0] _3_;
  wire [15:0] _4_;
  reg [15:0] _5_ = 16'h0000;
  input clock;
  wire clock;
  output [15:0] i_addr;
  wire [15:0] i_addr;
  input [7:0] ir_inc;
  wire [7:0] ir_inc;
  input pc_clr;
  wire pc_clr;
  wire [15:0] pc_count;
  input pc_inc;
  wire pc_inc;
  input pc_ld;
  wire pc_ld;
  assign _0_ = pc_count + 16'h0001;
  assign _1_ = pc_count + { 8'h00, ir_inc };
  assign _2_ = pc_ld ? _1_ : pc_count;
  assign _3_ = pc_clr ? 16'h0000 : _2_;
  assign _4_ = pc_inc ? _0_ : _3_;
  always @(posedge clock)
    _5_ <= _4_;
  assign pc_count = _5_;
  assign i_addr = pc_count;
endmodule

module po(rf_s0, rf_s1, rf_w_data, d_r_data, rf_w_wr, rf_rp_rd, rf_rq_rd, clock, rf_w_addr, rf_rp_addr, rf_rq_addr, alu_s0, alu_s1, rf_rp_zero, d_w_data);
  wire [15:0] _0_;
  wire [15:0] _1_;
  wire [15:0] _2_;
  wire _3_;
  wire [15:0] _4_;
  wire \alu_0:159 ;
  wire [15:0] \alu_0:160 ;
  input alu_s0;
  wire alu_s0;
  input alu_s1;
  wire alu_s1;
  wire [15:0] ans;
  input clock;
  wire clock;
  input [15:0] d_r_data;
  wire [15:0] d_r_data;
  output [15:0] d_w_data;
  wire [15:0] d_w_data;
  wire [15:0] \muxf_0:150 ;
  wire [15:0] \regf_0:153 ;
  wire [15:0] \regf_0:154 ;
  input [3:0] rf_rp_addr;
  wire [3:0] rf_rp_addr;
  input rf_rp_rd;
  wire rf_rp_rd;
  output rf_rp_zero;
  wire rf_rp_zero;
  input [3:0] rf_rq_addr;
  wire [3:0] rf_rq_addr;
  input rf_rq_rd;
  wire rf_rq_rd;
  input rf_s0;
  wire rf_s0;
  input rf_s1;
  wire rf_s1;
  input [3:0] rf_w_addr;
  wire [3:0] rf_w_addr;
  input [7:0] rf_w_data;
  wire [7:0] rf_w_data;
  input rf_w_wr;
  wire rf_w_wr;
  wire [15:0] rp_data;
  wire [15:0] rq_data;
  wire [15:0] w_data;
  alu alu_0 (
    .a(rp_data),
    .ans(_4_),
    .b(rq_data),
    .rp_zero(_3_),
    .s0(alu_s0),
    .s1(alu_s1)
  );
  muxf muxf_0 (
    .ans(ans),
    .d_r_data(d_r_data),
    .rf_w_data(rf_w_data),
    .s0(rf_s0),
    .s1(rf_s1),
    .w_data(_0_)
  );
  regf regf_0 (
    .clock(clock),
    .rp_addr(rf_rp_addr),
    .rp_data(_2_),
    .rp_rd(rf_rp_rd),
    .rq_addr(rf_rq_addr),
    .rq_data(_1_),
    .rq_rd(rf_rq_rd),
    .w_addr(rf_w_addr),
    .w_data(w_data),
    .w_wr(rf_w_wr)
  );
  assign ans = \alu_0:160 ;
  assign rp_data = \regf_0:154 ;
  assign rq_data = \regf_0:153 ;
  assign w_data = \muxf_0:150 ;
  assign \muxf_0:150  = _0_;
  assign \regf_0:153  = _1_;
  assign \regf_0:154  = _2_;
  assign \alu_0:159  = _3_;
  assign \alu_0:160  = _4_;
  assign rf_rp_zero = \alu_0:159 ;
  assign d_w_data = rp_data;
endmodule

module regf(w_addr, rp_addr, rq_addr, w_wr, rp_rd, rq_rd, clock, w_data, rq_data, rp_data);
  reg [15:0] _0_;
  reg [15:0] _1_;
  wire [335:0] _2_;
  wire [15:0] _3_;
  wire [335:0] _4_;
  wire [15:0] _5_;
  input clock;
  wire clock;
  input [3:0] rp_addr;
  wire [3:0] rp_addr;
  output [15:0] rp_data;
  wire [15:0] rp_data;
  input rp_rd;
  wire rp_rd;
  input [3:0] rq_addr;
  wire [3:0] rq_addr;
  output [15:0] rq_data;
  wire [15:0] rq_data;
  input rq_rd;
  wire rq_rd;
  input [3:0] w_addr;
  wire [3:0] w_addr;
  input [15:0] w_data;
  wire [15:0] w_data;
  input w_wr;
  wire w_wr;
  reg [15:0] rf [20:0];
  always @(posedge clock) begin
    if (w_wr)
      rf[{ 1'h0, w_addr }] <= w_data;
  end
  assign _5_ = rf[{ 1'h0, rq_addr }];
  assign _3_ = rf[{ 1'h0, rp_addr }];
  always @*
    if (rq_rd) _0_ = _5_;
  always @*
    if (rp_rd) _1_ = _3_;
  assign rq_data = _0_;
  assign rp_data = _1_;
endmodule

module uc(clock, reset, i_data, rf_rp_zero, leds, i_addr, i_rd, d_addr, d_rd, d_wr, rf_w_wr, rf_rp_rd, rf_rq_rd, rf_w_addr, rf_rp_addr, rf_rq_addr, rf_s0, rf_s1, rf_w_data, alu_s0, alu_s1
);
  wire _00_;
  wire _01_;
  wire _02_;
  wire _03_;
  wire _04_;
  wire [7:0] _05_;
  wire _06_;
  wire _07_;
  wire _08_;
  wire _09_;
  wire [7:0] _10_;
  wire [3:0] _11_;
  wire [3:0] _12_;
  wire [3:0] _13_;
  wire _14_;
  wire _15_;
  wire _16_;
  wire _17_;
  wire _18_;
  wire [15:0] _19_;
  wire [15:0] _20_;
  output alu_s0;
  wire alu_s0;
  output alu_s1;
  wire alu_s1;
  wire \bc_0:100 ;
  wire \bc_0:101 ;
  wire \bc_0:83 ;
  wire \bc_0:84 ;
  wire \bc_0:85 ;
  wire \bc_0:86 ;
  wire \bc_0:87 ;
  wire [7:0] \bc_0:88 ;
  wire \bc_0:89 ;
  wire \bc_0:90 ;
  wire \bc_0:91 ;
  wire \bc_0:92 ;
  wire [7:0] \bc_0:93 ;
  wire [3:0] \bc_0:94 ;
  wire [3:0] \bc_0:95 ;
  wire [3:0] \bc_0:96 ;
  wire \bc_0:97 ;
  wire \bc_0:98 ;
  wire \bc_0:99 ;
  input clock;
  wire clock;
  output [7:0] d_addr;
  wire [7:0] d_addr;
  output d_rd;
  wire d_rd;
  output d_wr;
  wire d_wr;
  output [15:0] i_addr;
  wire [15:0] i_addr;
  input [15:0] i_data;
  wire [15:0] i_data;
  output i_rd;
  wire i_rd;
  wire [15:0] \ir_0:144 ;
  wire [15:0] ir_data_out;
  wire ir_ld;
  output [3:0] leds;
  wire [3:0] leds;
  wire [15:0] \pc_0:141 ;
  wire pc_clr;
  wire pc_inc;
  wire pc_ld;
  input reset;
  wire reset;
  output [3:0] rf_rp_addr;
  wire [3:0] rf_rp_addr;
  output rf_rp_rd;
  wire rf_rp_rd;
  input rf_rp_zero;
  wire rf_rp_zero;
  output [3:0] rf_rq_addr;
  wire [3:0] rf_rq_addr;
  output rf_rq_rd;
  wire rf_rq_rd;
  output rf_s0;
  wire rf_s0;
  output rf_s1;
  wire rf_s1;
  output [3:0] rf_w_addr;
  wire [3:0] rf_w_addr;
  output [7:0] rf_w_data;
  wire [7:0] rf_w_data;
  output rf_w_wr;
  wire rf_w_wr;
  bc bc_0 (
    .alu_s0(_17_),
    .alu_s1(_18_),
    .clock(clock),
    .d_addr(_05_),
    .d_rd(_06_),
    .d_wr(_07_),
    .i_rd(_04_),
    .ir_data_out(ir_data_out),
    .ir_ld(_03_),
    .pc_clr(_00_),
    .pc_inc(_02_),
    .pc_ld(_01_),
    .reset(reset),
    .rf_rp_addr(_12_),
    .rf_rp_rd(_15_),
    .rf_rp_zero(rf_rp_zero),
    .rf_rq_addr(_13_),
    .rf_rq_rd(_16_),
    .rf_s0(_09_),
    .rf_s1(_08_),
    .rf_w_addr(_11_),
    .rf_w_data(_10_),
    .rf_w_wr(_14_)
  );
  ir ir_0 (
    .clock(clock),
    .ir_data_in(i_data),
    .ir_data_out(_20_),
    .ir_ld(ir_ld)
  );
  pc pc_0 (
    .clock(clock),
    .i_addr(_19_),
    .ir_inc(ir_data_out[7:0]),
    .pc_clr(pc_clr),
    .pc_inc(pc_inc),
    .pc_ld(pc_ld)
  );
  assign pc_ld = \bc_0:84 ;
  assign pc_clr = \bc_0:83 ;
  assign pc_inc = \bc_0:85 ;
  assign ir_ld = \bc_0:86 ;
  assign ir_data_out = \ir_0:144 ;
  assign \bc_0:83  = _00_;
  assign \bc_0:84  = _01_;
  assign \bc_0:85  = _02_;
  assign \bc_0:86  = _03_;
  assign \bc_0:87  = _04_;
  assign \bc_0:88  = _05_;
  assign \bc_0:89  = _06_;
  assign \bc_0:90  = _07_;
  assign \bc_0:91  = _08_;
  assign \bc_0:92  = _09_;
  assign \bc_0:93  = _10_;
  assign \bc_0:94  = _11_;
  assign \bc_0:95  = _12_;
  assign \bc_0:96  = _13_;
  assign \bc_0:97  = _14_;
  assign \bc_0:98  = _15_;
  assign \bc_0:99  = _16_;
  assign \bc_0:100  = _17_;
  assign \bc_0:101  = _18_;
  assign \pc_0:141  = _19_;
  assign \ir_0:144  = _20_;
  assign leds = ir_data_out[15:12];
  assign i_addr = \pc_0:141 ;
  assign i_rd = \bc_0:87 ;
  assign d_addr = \bc_0:88 ;
  assign d_rd = \bc_0:89 ;
  assign d_wr = \bc_0:90 ;
  assign rf_w_wr = \bc_0:97 ;
  assign rf_rp_rd = \bc_0:98 ;
  assign rf_rq_rd = \bc_0:99 ;
  assign rf_w_addr = \bc_0:94 ;
  assign rf_rp_addr = \bc_0:95 ;
  assign rf_rq_addr = \bc_0:96 ;
  assign rf_s0 = \bc_0:92 ;
  assign rf_s1 = \bc_0:91 ;
  assign rf_w_data = \bc_0:93 ;
  assign alu_s0 = \bc_0:100 ;
  assign alu_s1 = \bc_0:101 ;
endmodule

module vahid6i(clock, reset, D_R_data, I_data, led_clock, leds, D_addr, D_rd, D_wr, D_W_data, I_rd, I_addr);
  wire [3:0] _00_;
  wire [3:0] _01_;
  wire [3:0] _02_;
  wire [3:0] _03_;
  wire _04_;
  wire _05_;
  wire [7:0] _06_;
  wire _07_;
  wire _08_;
  wire _09_;
  wire [15:0] _10_;
  wire [15:0] _11_;
  wire _12_;
  wire [7:0] _13_;
  wire _14_;
  wire _15_;
  wire _16_;
  wire _17_;
  wire _18_;
  input [15:0] D_R_data;
  wire [15:0] D_R_data;
  output [15:0] D_W_data;
  wire [15:0] D_W_data;
  output [7:0] D_addr;
  wire [7:0] D_addr;
  output D_rd;
  wire D_rd;
  output D_wr;
  wire D_wr;
  output [15:0] I_addr;
  wire [15:0] I_addr;
  input [15:0] I_data;
  wire [15:0] I_data;
  output I_rd;
  wire I_rd;
  wire alu_s0;
  wire alu_s1;
  input clock;
  wire clock;
  output led_clock;
  wire led_clock;
  output [3:0] leds;
  wire [3:0] leds;
  wire \po_0:59 ;
  wire [15:0] \po_0:60 ;
  input reset;
  wire reset;
  wire [3:0] rf_rp_addr;
  wire rf_rp_rd;
  wire rf_rp_zero;
  wire [3:0] rf_rq_addr;
  wire rf_rq_rd;
  wire rf_s0;
  wire rf_s1;
  wire [3:0] rf_w_addr;
  wire [7:0] rf_w_data;
  wire rf_w_wr;
  wire \uc_0:10 ;
  wire [7:0] \uc_0:11 ;
  wire \uc_0:12 ;
  wire \uc_0:13 ;
  wire \uc_0:14 ;
  wire \uc_0:15 ;
  wire \uc_0:16 ;
  wire [3:0] \uc_0:17 ;
  wire [3:0] \uc_0:18 ;
  wire [3:0] \uc_0:19 ;
  wire \uc_0:20 ;
  wire \uc_0:21 ;
  wire [7:0] \uc_0:22 ;
  wire \uc_0:23 ;
  wire \uc_0:24 ;
  wire [3:0] \uc_0:8 ;
  wire [15:0] \uc_0:9 ;
  po po_0 (
    .alu_s0(alu_s0),
    .alu_s1(alu_s1),
    .clock(clock),
    .d_r_data(D_R_data),
    .d_w_data(_10_),
    .rf_rp_addr(rf_rp_addr),
    .rf_rp_rd(rf_rp_rd),
    .rf_rp_zero(_09_),
    .rf_rq_addr(rf_rq_addr),
    .rf_rq_rd(rf_rq_rd),
    .rf_s0(rf_s0),
    .rf_s1(rf_s1),
    .rf_w_addr(rf_w_addr),
    .rf_w_data(rf_w_data),
    .rf_w_wr(rf_w_wr)
  );
  uc uc_0 (
    .alu_s0(_07_),
    .alu_s1(_08_),
    .clock(clock),
    .d_addr(_13_),
    .d_rd(_14_),
    .d_wr(_15_),
    .i_addr(_11_),
    .i_data(I_data),
    .i_rd(_12_),
    .leds(_00_),
    .reset(reset),
    .rf_rp_addr(_02_),
    .rf_rp_rd(_17_),
    .rf_rp_zero(rf_rp_zero),
    .rf_rq_addr(_03_),
    .rf_rq_rd(_18_),
    .rf_s0(_04_),
    .rf_s1(_05_),
    .rf_w_addr(_01_),
    .rf_w_data(_06_),
    .rf_w_wr(_16_)
  );
  assign rf_w_wr = \uc_0:14 ;
  assign rf_rp_rd = \uc_0:15 ;
  assign rf_rq_rd = \uc_0:16 ;
  assign rf_w_addr = \uc_0:17 ;
  assign rf_rp_addr = \uc_0:18 ;
  assign rf_rq_addr = \uc_0:19 ;
  assign rf_rp_zero = \po_0:59 ;
  assign rf_s0 = \uc_0:20 ;
  assign rf_s1 = \uc_0:21 ;
  assign rf_w_data = \uc_0:22 ;
  assign alu_s0 = \uc_0:23 ;
  assign alu_s1 = \uc_0:24 ;
  assign \uc_0:8  = _00_;
  assign \uc_0:9  = _11_;
  assign \uc_0:10  = _12_;
  assign \uc_0:11  = _13_;
  assign \uc_0:12  = _14_;
  assign \uc_0:13  = _15_;
  assign \uc_0:14  = _16_;
  assign \uc_0:15  = _17_;
  assign \uc_0:16  = _18_;
  assign \uc_0:17  = _01_;
  assign \uc_0:18  = _02_;
  assign \uc_0:19  = _03_;
  assign \uc_0:20  = _04_;
  assign \uc_0:21  = _05_;
  assign \uc_0:22  = _06_;
  assign \uc_0:23  = _07_;
  assign \uc_0:24  = _08_;
  assign \po_0:59  = _09_;
  assign \po_0:60  = _10_;
  assign led_clock = clock;
  assign leds = \uc_0:8 ;
  assign D_addr = \uc_0:11 ;
  assign D_rd = \uc_0:12 ;
  assign D_wr = \uc_0:13 ;
  assign D_W_data = \po_0:60 ;
  assign I_rd = \uc_0:10 ;
  assign I_addr = \uc_0:9 ;
endmodule
