-- Parte Operacional

LIBRARY ieee;
USE ieee.std_logic_1164.all;
USE ieee.numeric_std.all;
USE work.constants.all;

ENTITY po IS
	PORT (
		-- Portas do MUX
		RF_s0,RF_s1	: IN STD_LOGIC;
		RF_W_data	: IN STD_LOGIC_VECTOR(tamanho_data_mux DOWNTO 0);
		R_data		: IN STD_LOGIC_VECTOR(tamanho-1 DOWNTO 0);
		--Portas do REGF
		RF_W_wr,RF_Rp_rd,RF_Rq_rd	: IN STD_LOGIC;
		W_addr,Rp_addr,Rq_addr		: IN STD_LOGIC_VECTOR(tamanho_regf-1 downto 0);
		--Portas ALU
		alu_s0,alu_s1	:	IN STD_LOGIC;
		W_data			: OUT STD_LOGIC_VECTOR(tamanho-1 downto 0)	
	); 

END po;

ARCHITECTURE arch OF po IS 
	COMPONENT muxf IS
		PORT(
			s1,s0			: IN STD_LOGIC;
			data0,data1	: IN STD_LOGIC_VECTOR(tamanho-1 downto 0);
			data2			: IN STD_LOGIC_VECTOR(tamanho_data_mux-1 downto 0);
			data_out		: OUT STD_LOGIC_VECTOR(tamanho-1 downto 0)
		);
	END COMPONENT;
	
	COMPONENT regf IS
		PORT(
			W_addr,Rp_addr,Rq_addr	: IN STD_LOGIC_VECTOR(tamanho_regf-1 downto 0);
			W_wr,Rp_rd,Rq_rd,clock	: IN STD_LOGIC;
			W_data						: IN STD_LOGIC_VECTOR(tamanho-1 downto 0);
			Rq_data,Rp_data			: OUT STD_LOGIC_VECTOR(tamanho-1 downto 0);
			Rp_zero	:	OUT STD_LOGIC
		);
	END COMPONENT;
	
		COMPONENT alu IS
		PORT(
			a,b		:	IN STD_LOGIC_VECTOR(tamanho-1 downto 0); 
			s0,s1		:	IN STD_LOGIC;
			ans		:	OUT STD_LOGIC_VECTOR(tamanho-1 downto 0)
		);
	END COMPONENT;
	
	FOR muxf_0: muxf USE ENTITY work.muxf;
	FOR regf_0: regf USE ENTITY work.regf;
	FOR alu_0: alu USE ENTITY work.alu;
	
	SIGNAL ans,data_out : STD_LOGIC_VECTOR(tamanho-1 downto 0);
	
BEGIN

	muxf_0: muxf PORT MAP(RF_s1,RF_s0,RF_W_data,R_data,ans,data_out);
	regf_0: regf PORT MAP(W_addr,Rp_addr,Rq_addr,W_wr,Rp_rd,Rq_rd,clock,W_data,Rq_data,Rp_data,Rp_zero);
	alu_0: alu PORT MAP(a,b,s0,s1,ans);
	
END arch;

