/* Generated by Yosys 0.27+22 (git sha1 53c0a6b78, gcc 12.2.0-3ubuntu1 -fPIC -Os) */

module alu(a, b, s0, s1, rp_zero, ans);
  wire _00_;
  wire _01_;
  wire _02_;
  wire _03_;
  wire _04_;
  wire _05_;
  wire _06_;
  wire [7:0] _07_;
  wire _08_;
  wire _09_;
  wire [7:0] _10_;
  wire [7:0] _11_;
  wire [7:0] _12_;
  wire [7:0] _13_;
  input [7:0] a;
  wire [7:0] a;
  output [7:0] ans;
  wire [7:0] ans;
  input [7:0] b;
  wire [7:0] b;
  output rp_zero;
  wire rp_zero;
  input s0;
  wire s0;
  input s1;
  wire s1;
  assign _00_ = a == 8'h00;
  assign _01_ = _00_ ? 1'h1 : 1'h0;
  assign _02_ = ~ s1;
  assign _03_ = ~ s0;
  assign _04_ = _02_ & _03_;
  assign _05_ = ~ s1;
  assign _06_ = _05_ & s0;
  assign _07_ = a + b;
  assign _08_ = ~ s0;
  assign _09_ = s1 & _08_;
  assign _10_ = a - b;
  assign _11_ = _09_ ? _10_ : 8'hzz;
  assign _12_ = _06_ ? _07_ : _11_;
  assign _13_ = _04_ ? a : _12_;
  assign rp_zero = _01_;
  assign ans = _13_;
endmodule

module bc(clock, reset, ir_data_out, rf_rp_zero, pc_clr, pc_ld, pc_inc, ir_ld, i_rd, leds, d_addr, d_rd, d_wr, rf_s1, rf_s0, rf_w_data, rf_w_addr, rf_rp_addr, rf_rq_addr, rf_w_wr, rf_rp_rd
, rf_rq_rd, alu_s0, alu_s1);
  wire _00_;
  wire _01_;
  wire _02_;
  wire _03_;
  wire _04_;
  wire _05_;
  wire _06_;
  wire _07_;
  wire _08_;
  wire _09_;
  wire _10_;
  wire [3:0] _11_;
  reg [3:0] _12_ = 4'h0;
  wire _13_;
  reg [7:0] _14_;
  wire _15_;
  reg [7:0] _16_;
  reg _17_;
  reg _18_;
  reg _19_;
  reg _20_;
  reg _21_;
  reg [7:0] _22_;
  reg _23_;
  reg _24_;
  reg _25_;
  reg _26_;
  reg [3:0] _27_;
  reg [3:0] _28_;
  reg [3:0] _29_;
  reg _30_;
  reg _31_;
  reg _32_;
  reg _33_;
  reg _34_;
  wire _35_;
  wire _36_;
  wire _37_;
  wire _38_;
  wire _39_;
  wire _40_;
  wire _41_;
  wire _42_;
  wire _43_;
  wire _44_;
  wire _45_;
  wire _46_;
  wire _47_;
  wire _48_;
  wire _49_;
  wire _50_;
  wire _51_;
  wire _52_;
  wire [7:0] _53_;
  wire _54_;
  wire _55_;
  wire _56_;
  wire _57_;
  wire [3:0] _58_;
  wire [3:0] _59_;
  wire [3:0] _60_;
  wire _61_;
  wire _62_;
  wire _63_;
  wire _64_;
  wire _65_;
  wire _66_;
  wire _67_;
  wire _68_;
  wire _69_;
  wire _70_;
  wire _71_;
  wire _72_;
  wire _73_;
  wire _74_;
  wire _75_;
  wire _76_;
  wire [3:0] _77_;
  wire _78_;
  wire [3:0] _79_;
  wire _80_;
  wire _81_;
  wire [3:0] _82_;
  wire [7:0] _83_;
  wire [7:0] _84_;
  wire [3:0] _85_;
  wire _86_;
  wire _87_;
  output alu_s0;
  wire alu_s0;
  output alu_s1;
  wire alu_s1;
  input clock;
  wire clock;
  wire [3:0] current_state;
  output [7:0] d_addr;
  wire [7:0] d_addr;
  output d_rd;
  wire d_rd;
  output d_wr;
  wire d_wr;
  wire [7:0] first_byte;
  output i_rd;
  wire i_rd;
  input [7:0] ir_data_out;
  wire [7:0] ir_data_out;
  output ir_ld;
  wire ir_ld;
  output [3:0] leds;
  wire [3:0] leds;
  wire [3:0] next_state;
  output pc_clr;
  wire pc_clr;
  output pc_inc;
  wire pc_inc;
  output pc_ld;
  wire pc_ld;
  input reset;
  wire reset;
  output [3:0] rf_rp_addr;
  wire [3:0] rf_rp_addr;
  output rf_rp_rd;
  wire rf_rp_rd;
  input rf_rp_zero;
  wire rf_rp_zero;
  output [3:0] rf_rq_addr;
  wire [3:0] rf_rq_addr;
  output rf_rq_rd;
  wire rf_rq_rd;
  output rf_s0;
  wire rf_s0;
  output rf_s1;
  wire rf_s1;
  output [3:0] rf_w_addr;
  wire [3:0] rf_w_addr;
  output [7:0] rf_w_data;
  wire [7:0] rf_w_data;
  output rf_w_wr;
  wire rf_w_wr;
  wire [7:0] second_byte;
  assign _35_ = next_state == 4'h0;
  assign _36_ = next_state == 4'h1;
  assign _37_ = next_state == 4'h2;
  assign _38_ = next_state == 4'h3;
  assign _39_ = next_state == 4'h4;
  assign _40_ = next_state == 4'h6;
  assign _41_ = next_state == 4'h7;
  assign _42_ = next_state == 4'h8;
  assign _43_ = next_state == 4'h9;
  assign _44_ = next_state == 4'ha;
  assign _45_ = next_state == 4'hb;
  assign _46_ = next_state == 4'hc;
  assign _47_ = next_state == 4'h5;
  function [0:0] \229 ;
    input [0:0] a;
    input [12:0] b;
    input [12:0] s;
    (* parallel_case *)
    casez (s)
      13'b????????????1:
        \229  = b[0:0];
      13'b???????????1?:
        \229  = b[1:1];
      13'b??????????1??:
        \229  = b[2:2];
      13'b?????????1???:
        \229  = b[3:3];
      13'b????????1????:
        \229  = b[4:4];
      13'b???????1?????:
        \229  = b[5:5];
      13'b??????1??????:
        \229  = b[6:6];
      13'b?????1???????:
        \229  = b[7:7];
      13'b????1????????:
        \229  = b[8:8];
      13'b???1?????????:
        \229  = b[9:9];
      13'b??1??????????:
        \229  = b[10:10];
      13'b?1???????????:
        \229  = b[11:11];
      13'b1????????????:
        \229  = b[12:12];
      default:
        \229  = a;
    endcase
  endfunction
  assign _48_ = \229 (_17_, { _17_, _17_, _17_, _17_, _17_, _17_, _17_, _17_, _17_, _17_, _17_, 2'h1 }, { _47_, _46_, _45_, _44_, _43_, _42_, _41_, _40_, _39_, _38_, _37_, _36_, _35_ });
  function [0:0] \232 ;
    input [0:0] a;
    input [12:0] b;
    input [12:0] s;
    (* parallel_case *)
    casez (s)
      13'b????????????1:
        \232  = b[0:0];
      13'b???????????1?:
        \232  = b[1:1];
      13'b??????????1??:
        \232  = b[2:2];
      13'b?????????1???:
        \232  = b[3:3];
      13'b????????1????:
        \232  = b[4:4];
      13'b???????1?????:
        \232  = b[5:5];
      13'b??????1??????:
        \232  = b[6:6];
      13'b?????1???????:
        \232  = b[7:7];
      13'b????1????????:
        \232  = b[8:8];
      13'b???1?????????:
        \232  = b[9:9];
      13'b??1??????????:
        \232  = b[10:10];
      13'b?1???????????:
        \232  = b[11:11];
      13'b1????????????:
        \232  = b[12:12];
      default:
        \232  = a;
    endcase
  endfunction
  assign _49_ = \232 (_18_, { _18_, 1'h1, _18_, _18_, _18_, _18_, _18_, _18_, _18_, _18_, _18_, 1'h0, _18_ }, { _47_, _46_, _45_, _44_, _43_, _42_, _41_, _40_, _39_, _38_, _37_, _36_, _35_ });
  function [0:0] \238 ;
    input [0:0] a;
    input [12:0] b;
    input [12:0] s;
    (* parallel_case *)
    casez (s)
      13'b????????????1:
        \238  = b[0:0];
      13'b???????????1?:
        \238  = b[1:1];
      13'b??????????1??:
        \238  = b[2:2];
      13'b?????????1???:
        \238  = b[3:3];
      13'b????????1????:
        \238  = b[4:4];
      13'b???????1?????:
        \238  = b[5:5];
      13'b??????1??????:
        \238  = b[6:6];
      13'b?????1???????:
        \238  = b[7:7];
      13'b????1????????:
        \238  = b[8:8];
      13'b???1?????????:
        \238  = b[9:9];
      13'b??1??????????:
        \238  = b[10:10];
      13'b?1???????????:
        \238  = b[11:11];
      13'b1????????????:
        \238  = b[12:12];
      default:
        \238  = a;
    endcase
  endfunction
  assign _50_ = \238 (_19_, { 1'h0, _19_, _19_, _19_, _19_, _19_, _19_, _19_, 3'h5, _19_, 1'h0 }, { _47_, _46_, _45_, _44_, _43_, _42_, _41_, _40_, _39_, _38_, _37_, _36_, _35_ });
  function [0:0] \241 ;
    input [0:0] a;
    input [12:0] b;
    input [12:0] s;
    (* parallel_case *)
    casez (s)
      13'b????????????1:
        \241  = b[0:0];
      13'b???????????1?:
        \241  = b[1:1];
      13'b??????????1??:
        \241  = b[2:2];
      13'b?????????1???:
        \241  = b[3:3];
      13'b????????1????:
        \241  = b[4:4];
      13'b???????1?????:
        \241  = b[5:5];
      13'b??????1??????:
        \241  = b[6:6];
      13'b?????1???????:
        \241  = b[7:7];
      13'b????1????????:
        \241  = b[8:8];
      13'b???1?????????:
        \241  = b[9:9];
      13'b??1??????????:
        \241  = b[10:10];
      13'b?1???????????:
        \241  = b[11:11];
      13'b1????????????:
        \241  = b[12:12];
      default:
        \241  = a;
    endcase
  endfunction
  assign _51_ = \241 (_20_, { _20_, _20_, _20_, _20_, _20_, _20_, _20_, _20_, _20_, 1'h1, _20_, 1'h1, _20_ }, { _47_, _46_, _45_, _44_, _43_, _42_, _41_, _40_, _39_, _38_, _37_, _36_, _35_ });
  function [0:0] \244 ;
    input [0:0] a;
    input [12:0] b;
    input [12:0] s;
    (* parallel_case *)
    casez (s)
      13'b????????????1:
        \244  = b[0:0];
      13'b???????????1?:
        \244  = b[1:1];
      13'b??????????1??:
        \244  = b[2:2];
      13'b?????????1???:
        \244  = b[3:3];
      13'b????????1????:
        \244  = b[4:4];
      13'b???????1?????:
        \244  = b[5:5];
      13'b??????1??????:
        \244  = b[6:6];
      13'b?????1???????:
        \244  = b[7:7];
      13'b????1????????:
        \244  = b[8:8];
      13'b???1?????????:
        \244  = b[9:9];
      13'b??1??????????:
        \244  = b[10:10];
      13'b?1???????????:
        \244  = b[11:11];
      13'b1????????????:
        \244  = b[12:12];
      default:
        \244  = a;
    endcase
  endfunction
  assign _52_ = \244 (_21_, { _21_, _21_, _21_, _21_, _21_, _21_, _21_, _21_, _21_, 1'h1, _21_, 1'h1, _21_ }, { _47_, _46_, _45_, _44_, _43_, _42_, _41_, _40_, _39_, _38_, _37_, _36_, _35_ });
  function [7:0] \245 ;
    input [7:0] a;
    input [103:0] b;
    input [12:0] s;
    (* parallel_case *)
    casez (s)
      13'b????????????1:
        \245  = b[7:0];
      13'b???????????1?:
        \245  = b[15:8];
      13'b??????????1??:
        \245  = b[23:16];
      13'b?????????1???:
        \245  = b[31:24];
      13'b????????1????:
        \245  = b[39:32];
      13'b???????1?????:
        \245  = b[47:40];
      13'b??????1??????:
        \245  = b[55:48];
      13'b?????1???????:
        \245  = b[63:56];
      13'b????1????????:
        \245  = b[71:64];
      13'b???1?????????:
        \245  = b[79:72];
      13'b??1??????????:
        \245  = b[87:80];
      13'b?1???????????:
        \245  = b[95:88];
      13'b1????????????:
        \245  = b[103:96];
      default:
        \245  = a;
    endcase
  endfunction
  assign _53_ = \245 (_22_, { _22_, _22_, _22_, _22_, _22_, _22_, second_byte, second_byte, _22_, _22_, _22_, _22_, _22_ }, { _47_, _46_, _45_, _44_, _43_, _42_, _41_, _40_, _39_, _38_, _37_, _36_, _35_ });
  function [0:0] \248 ;
    input [0:0] a;
    input [12:0] b;
    input [12:0] s;
    (* parallel_case *)
    casez (s)
      13'b????????????1:
        \248  = b[0:0];
      13'b???????????1?:
        \248  = b[1:1];
      13'b??????????1??:
        \248  = b[2:2];
      13'b?????????1???:
        \248  = b[3:3];
      13'b????????1????:
        \248  = b[4:4];
      13'b???????1?????:
        \248  = b[5:5];
      13'b??????1??????:
        \248  = b[6:6];
      13'b?????1???????:
        \248  = b[7:7];
      13'b????1????????:
        \248  = b[8:8];
      13'b???1?????????:
        \248  = b[9:9];
      13'b??1??????????:
        \248  = b[10:10];
      13'b?1???????????:
        \248  = b[11:11];
      13'b1????????????:
        \248  = b[12:12];
      default:
        \248  = a;
    endcase
  endfunction
  assign _54_ = \248 (_23_, { _23_, _23_, _23_, _23_, _23_, _23_, _23_, 1'h1, _23_, _23_, _23_, 1'h0, _23_ }, { _47_, _46_, _45_, _44_, _43_, _42_, _41_, _40_, _39_, _38_, _37_, _36_, _35_ });
  function [0:0] \251 ;
    input [0:0] a;
    input [12:0] b;
    input [12:0] s;
    (* parallel_case *)
    casez (s)
      13'b????????????1:
        \251  = b[0:0];
      13'b???????????1?:
        \251  = b[1:1];
      13'b??????????1??:
        \251  = b[2:2];
      13'b?????????1???:
        \251  = b[3:3];
      13'b????????1????:
        \251  = b[4:4];
      13'b???????1?????:
        \251  = b[5:5];
      13'b??????1??????:
        \251  = b[6:6];
      13'b?????1???????:
        \251  = b[7:7];
      13'b????1????????:
        \251  = b[8:8];
      13'b???1?????????:
        \251  = b[9:9];
      13'b??1??????????:
        \251  = b[10:10];
      13'b?1???????????:
        \251  = b[11:11];
      13'b1????????????:
        \251  = b[12:12];
      default:
        \251  = a;
    endcase
  endfunction
  assign _55_ = \251 (_24_, { _24_, _24_, _24_, _24_, _24_, _24_, 1'h1, _24_, _24_, _24_, _24_, 1'h0, _24_ }, { _47_, _46_, _45_, _44_, _43_, _42_, _41_, _40_, _39_, _38_, _37_, _36_, _35_ });
  function [0:0] \256 ;
    input [0:0] a;
    input [12:0] b;
    input [12:0] s;
    (* parallel_case *)
    casez (s)
      13'b????????????1:
        \256  = b[0:0];
      13'b???????????1?:
        \256  = b[1:1];
      13'b??????????1??:
        \256  = b[2:2];
      13'b?????????1???:
        \256  = b[3:3];
      13'b????????1????:
        \256  = b[4:4];
      13'b???????1?????:
        \256  = b[5:5];
      13'b??????1??????:
        \256  = b[6:6];
      13'b?????1???????:
        \256  = b[7:7];
      13'b????1????????:
        \256  = b[8:8];
      13'b???1?????????:
        \256  = b[9:9];
      13'b??1??????????:
        \256  = b[10:10];
      13'b?1???????????:
        \256  = b[11:11];
      13'b1????????????:
        \256  = b[12:12];
      default:
        \256  = a;
    endcase
  endfunction
  assign _56_ = \256 (_25_, { _25_, _25_, _25_, 3'h2, _25_, 1'h0, _25_, _25_, _25_, _25_, _25_ }, { _47_, _46_, _45_, _44_, _43_, _42_, _41_, _40_, _39_, _38_, _37_, _36_, _35_ });
  function [0:0] \261 ;
    input [0:0] a;
    input [12:0] b;
    input [12:0] s;
    (* parallel_case *)
    casez (s)
      13'b????????????1:
        \261  = b[0:0];
      13'b???????????1?:
        \261  = b[1:1];
      13'b??????????1??:
        \261  = b[2:2];
      13'b?????????1???:
        \261  = b[3:3];
      13'b????????1????:
        \261  = b[4:4];
      13'b???????1?????:
        \261  = b[5:5];
      13'b??????1??????:
        \261  = b[6:6];
      13'b?????1???????:
        \261  = b[7:7];
      13'b????1????????:
        \261  = b[8:8];
      13'b???1?????????:
        \261  = b[9:9];
      13'b??1??????????:
        \261  = b[10:10];
      13'b?1???????????:
        \261  = b[11:11];
      13'b1????????????:
        \261  = b[12:12];
      default:
        \261  = a;
    endcase
  endfunction
  assign _57_ = \261 (_26_, { _26_, _26_, _26_, 3'h0, _26_, 1'h1, _26_, _26_, _26_, _26_, _26_ }, { _47_, _46_, _45_, _44_, _43_, _42_, _41_, _40_, _39_, _38_, _37_, _36_, _35_ });
  function [3:0] \262 ;
    input [3:0] a;
    input [51:0] b;
    input [12:0] s;
    (* parallel_case *)
    casez (s)
      13'b????????????1:
        \262  = b[3:0];
      13'b???????????1?:
        \262  = b[7:4];
      13'b??????????1??:
        \262  = b[11:8];
      13'b?????????1???:
        \262  = b[15:12];
      13'b????????1????:
        \262  = b[19:16];
      13'b???????1?????:
        \262  = b[23:20];
      13'b??????1??????:
        \262  = b[27:24];
      13'b?????1???????:
        \262  = b[31:28];
      13'b????1????????:
        \262  = b[35:32];
      13'b???1?????????:
        \262  = b[39:36];
      13'b??1??????????:
        \262  = b[43:40];
      13'b?1???????????:
        \262  = b[47:44];
      13'b1????????????:
        \262  = b[51:48];
      default:
        \262  = a;
    endcase
  endfunction
  assign _58_ = \262 (_27_, { _27_, _27_, _27_, second_byte[3:0], first_byte[3:0], second_byte[3:0], _27_, first_byte[3:0], _27_, _27_, _27_, _27_, _27_ }, { _47_, _46_, _45_, _44_, _43_, _42_, _41_, _40_, _39_, _38_, _37_, _36_, _35_ });
  function [3:0] \263 ;
    input [3:0] a;
    input [51:0] b;
    input [12:0] s;
    (* parallel_case *)
    casez (s)
      13'b????????????1:
        \263  = b[3:0];
      13'b???????????1?:
        \263  = b[7:4];
      13'b??????????1??:
        \263  = b[11:8];
      13'b?????????1???:
        \263  = b[15:12];
      13'b????????1????:
        \263  = b[19:16];
      13'b???????1?????:
        \263  = b[23:20];
      13'b??????1??????:
        \263  = b[27:24];
      13'b?????1???????:
        \263  = b[31:28];
      13'b????1????????:
        \263  = b[35:32];
      13'b???1?????????:
        \263  = b[39:36];
      13'b??1??????????:
        \263  = b[43:40];
      13'b?1???????????:
        \263  = b[47:44];
      13'b1????????????:
        \263  = b[51:48];
      default:
        \263  = a;
    endcase
  endfunction
  assign _59_ = \263 (_28_, { _28_, _28_, first_byte[3:0], first_byte[3:0], _28_, first_byte[3:0], first_byte[3:0], _28_, _28_, _28_, _28_, _28_, _28_ }, { _47_, _46_, _45_, _44_, _43_, _42_, _41_, _40_, _39_, _38_, _37_, _36_, _35_ });
  function [3:0] \264 ;
    input [3:0] a;
    input [51:0] b;
    input [12:0] s;
    (* parallel_case *)
    casez (s)
      13'b????????????1:
        \264  = b[3:0];
      13'b???????????1?:
        \264  = b[7:4];
      13'b??????????1??:
        \264  = b[11:8];
      13'b?????????1???:
        \264  = b[15:12];
      13'b????????1????:
        \264  = b[19:16];
      13'b???????1?????:
        \264  = b[23:20];
      13'b??????1??????:
        \264  = b[27:24];
      13'b?????1???????:
        \264  = b[31:28];
      13'b????1????????:
        \264  = b[35:32];
      13'b???1?????????:
        \264  = b[39:36];
      13'b??1??????????:
        \264  = b[43:40];
      13'b?1???????????:
        \264  = b[47:44];
      13'b1????????????:
        \264  = b[51:48];
      default:
        \264  = a;
    endcase
  endfunction
  assign _60_ = \264 (_29_, { _29_, _29_, _29_, second_byte[7:4], _29_, second_byte[7:4], _29_, _29_, _29_, _29_, _29_, _29_, _29_ }, { _47_, _46_, _45_, _44_, _43_, _42_, _41_, _40_, _39_, _38_, _37_, _36_, _35_ });
  function [0:0] \270 ;
    input [0:0] a;
    input [12:0] b;
    input [12:0] s;
    (* parallel_case *)
    casez (s)
      13'b????????????1:
        \270  = b[0:0];
      13'b???????????1?:
        \270  = b[1:1];
      13'b??????????1??:
        \270  = b[2:2];
      13'b?????????1???:
        \270  = b[3:3];
      13'b????????1????:
        \270  = b[4:4];
      13'b???????1?????:
        \270  = b[5:5];
      13'b??????1??????:
        \270  = b[6:6];
      13'b?????1???????:
        \270  = b[7:7];
      13'b????1????????:
        \270  = b[8:8];
      13'b???1?????????:
        \270  = b[9:9];
      13'b??1??????????:
        \270  = b[10:10];
      13'b?1???????????:
        \270  = b[11:11];
      13'b1????????????:
        \270  = b[12:12];
      default:
        \270  = a;
    endcase
  endfunction
  assign _61_ = \270 (_30_, { _30_, _30_, _30_, 3'h7, _30_, 1'h1, _30_, _30_, _30_, 1'h0, _30_ }, { _47_, _46_, _45_, _44_, _43_, _42_, _41_, _40_, _39_, _38_, _37_, _36_, _35_ });
  function [0:0] \276 ;
    input [0:0] a;
    input [12:0] b;
    input [12:0] s;
    (* parallel_case *)
    casez (s)
      13'b????????????1:
        \276  = b[0:0];
      13'b???????????1?:
        \276  = b[1:1];
      13'b??????????1??:
        \276  = b[2:2];
      13'b?????????1???:
        \276  = b[3:3];
      13'b????????1????:
        \276  = b[4:4];
      13'b???????1?????:
        \276  = b[5:5];
      13'b??????1??????:
        \276  = b[6:6];
      13'b?????1???????:
        \276  = b[7:7];
      13'b????1????????:
        \276  = b[8:8];
      13'b???1?????????:
        \276  = b[9:9];
      13'b??1??????????:
        \276  = b[10:10];
      13'b?1???????????:
        \276  = b[11:11];
      13'b1????????????:
        \276  = b[12:12];
      default:
        \276  = a;
    endcase
  endfunction
  assign _62_ = \276 (_31_, { _31_, _31_, 2'h3, _31_, 2'h3, _31_, _31_, _31_, _31_, 1'h0, _31_ }, { _47_, _46_, _45_, _44_, _43_, _42_, _41_, _40_, _39_, _38_, _37_, _36_, _35_ });
  function [0:0] \280 ;
    input [0:0] a;
    input [12:0] b;
    input [12:0] s;
    (* parallel_case *)
    casez (s)
      13'b????????????1:
        \280  = b[0:0];
      13'b???????????1?:
        \280  = b[1:1];
      13'b??????????1??:
        \280  = b[2:2];
      13'b?????????1???:
        \280  = b[3:3];
      13'b????????1????:
        \280  = b[4:4];
      13'b???????1?????:
        \280  = b[5:5];
      13'b??????1??????:
        \280  = b[6:6];
      13'b?????1???????:
        \280  = b[7:7];
      13'b????1????????:
        \280  = b[8:8];
      13'b???1?????????:
        \280  = b[9:9];
      13'b??1??????????:
        \280  = b[10:10];
      13'b?1???????????:
        \280  = b[11:11];
      13'b1????????????:
        \280  = b[12:12];
      default:
        \280  = a;
    endcase
  endfunction
  assign _63_ = \280 (_32_, { _32_, _32_, _32_, 1'h1, _32_, 1'h1, _32_, _32_, _32_, _32_, _32_, 1'h0, _32_ }, { _47_, _46_, _45_, _44_, _43_, _42_, _41_, _40_, _39_, _38_, _37_, _36_, _35_ });
  function [0:0] \283 ;
    input [0:0] a;
    input [12:0] b;
    input [12:0] s;
    (* parallel_case *)
    casez (s)
      13'b????????????1:
        \283  = b[0:0];
      13'b???????????1?:
        \283  = b[1:1];
      13'b??????????1??:
        \283  = b[2:2];
      13'b?????????1???:
        \283  = b[3:3];
      13'b????????1????:
        \283  = b[4:4];
      13'b???????1?????:
        \283  = b[5:5];
      13'b??????1??????:
        \283  = b[6:6];
      13'b?????1???????:
        \283  = b[7:7];
      13'b????1????????:
        \283  = b[8:8];
      13'b???1?????????:
        \283  = b[9:9];
      13'b??1??????????:
        \283  = b[10:10];
      13'b?1???????????:
        \283  = b[11:11];
      13'b1????????????:
        \283  = b[12:12];
      default:
        \283  = a;
    endcase
  endfunction
  assign _64_ = \283 (_33_, { _33_, _33_, _33_, 1'h0, _33_, 1'h1, _33_, _33_, _33_, _33_, _33_, _33_, _33_ }, { _47_, _46_, _45_, _44_, _43_, _42_, _41_, _40_, _39_, _38_, _37_, _36_, _35_ });
  function [0:0] \286 ;
    input [0:0] a;
    input [12:0] b;
    input [12:0] s;
    (* parallel_case *)
    casez (s)
      13'b????????????1:
        \286  = b[0:0];
      13'b???????????1?:
        \286  = b[1:1];
      13'b??????????1??:
        \286  = b[2:2];
      13'b?????????1???:
        \286  = b[3:3];
      13'b????????1????:
        \286  = b[4:4];
      13'b???????1?????:
        \286  = b[5:5];
      13'b??????1??????:
        \286  = b[6:6];
      13'b?????1???????:
        \286  = b[7:7];
      13'b????1????????:
        \286  = b[8:8];
      13'b???1?????????:
        \286  = b[9:9];
      13'b??1??????????:
        \286  = b[10:10];
      13'b?1???????????:
        \286  = b[11:11];
      13'b1????????????:
        \286  = b[12:12];
      default:
        \286  = a;
    endcase
  endfunction
  assign _65_ = \286 (_34_, { _34_, _34_, _34_, 1'h1, _34_, 1'h0, _34_, _34_, _34_, _34_, _34_, _34_, _34_ }, { _47_, _46_, _45_, _44_, _43_, _42_, _41_, _40_, _39_, _38_, _37_, _36_, _35_ });
  assign _66_ = current_state == 4'h0;
  assign _67_ = current_state == 4'h1;
  assign _68_ = current_state == 4'h2;
  assign _69_ = current_state == 4'h3;
  assign _70_ = current_state == 4'h4;
  assign _71_ = first_byte[7:4] == 4'h0;
  assign _72_ = first_byte[7:4] == 4'h1;
  assign _73_ = first_byte[7:4] == 4'h2;
  assign _74_ = first_byte[7:4] == 4'h3;
  assign _75_ = first_byte[7:4] == 4'h4;
  assign _76_ = first_byte[7:4] == 4'h5;
  function [3:0] \339 ;
    input [3:0] a;
    input [23:0] b;
    input [5:0] s;
    (* parallel_case *)
    casez (s)
      6'b?????1:
        \339  = b[3:0];
      6'b????1?:
        \339  = b[7:4];
      6'b???1??:
        \339  = b[11:8];
      6'b??1???:
        \339  = b[15:12];
      6'b?1????:
        \339  = b[19:16];
      6'b1?????:
        \339  = b[23:20];
      default:
        \339  = a;
    endcase
  endfunction
  assign _77_ = \339 (4'h1, 24'hba9876, { _76_, _75_, _74_, _73_, _72_, _71_ });
  assign _78_ = current_state == 4'h5;
  assign _79_ = rf_rp_zero ? 4'hc : 4'h1;
  assign _80_ = current_state == 4'hb;
  assign _81_ = current_state == 4'hc;
  function [3:0] \357 ;
    input [3:0] a;
    input [31:0] b;
    input [7:0] s;
    (* parallel_case *)
    casez (s)
      8'b???????1:
        \357  = b[3:0];
      8'b??????1?:
        \357  = b[7:4];
      8'b?????1??:
        \357  = b[11:8];
      8'b????1???:
        \357  = b[15:12];
      8'b???1????:
        \357  = b[19:16];
      8'b??1?????:
        \357  = b[23:20];
      8'b?1??????:
        \357  = b[27:24];
      8'b1???????:
        \357  = b[31:28];
      default:
        \357  = a;
    endcase
  endfunction
  assign _82_ = \357 (4'h1, { 4'h1, _79_, _77_, 20'h54321 }, { _81_, _80_, _78_, _70_, _69_, _68_, _67_, _66_ });
  function [7:0] \358 ;
    input [7:0] a;
    input [63:0] b;
    input [7:0] s;
    (* parallel_case *)
    casez (s)
      8'b???????1:
        \358  = b[7:0];
      8'b??????1?:
        \358  = b[15:8];
      8'b?????1??:
        \358  = b[23:16];
      8'b????1???:
        \358  = b[31:24];
      8'b???1????:
        \358  = b[39:32];
      8'b??1?????:
        \358  = b[47:40];
      8'b?1??????:
        \358  = b[55:48];
      8'b1???????:
        \358  = b[63:56];
      default:
        \358  = a;
    endcase
  endfunction
  assign _83_ = \358 (first_byte, { first_byte, first_byte, first_byte, first_byte, first_byte, ir_data_out, first_byte, first_byte }, { _81_, _80_, _78_, _70_, _69_, _68_, _67_, _66_ });
  function [7:0] \359 ;
    input [7:0] a;
    input [63:0] b;
    input [7:0] s;
    (* parallel_case *)
    casez (s)
      8'b???????1:
        \359  = b[7:0];
      8'b??????1?:
        \359  = b[15:8];
      8'b?????1??:
        \359  = b[23:16];
      8'b????1???:
        \359  = b[31:24];
      8'b???1????:
        \359  = b[39:32];
      8'b??1?????:
        \359  = b[47:40];
      8'b?1??????:
        \359  = b[55:48];
      8'b1???????:
        \359  = b[63:56];
      default:
        \359  = a;
    endcase
  endfunction
  assign _84_ = \359 (second_byte, { second_byte, second_byte, second_byte, ir_data_out, second_byte, second_byte, second_byte, second_byte }, { _81_, _80_, _78_, _70_, _69_, _68_, _67_, _66_ });
  assign _85_ = reset ? 4'h0 : _82_;
  assign _86_ = current_state == 4'h0;
  assign _87_ = current_state == 4'h1;
  assign _00_ = current_state == 4'h2;
  assign _01_ = current_state == 4'h3;
  assign _02_ = current_state == 4'h4;
  assign _03_ = current_state == 4'h5;
  assign _04_ = current_state == 4'h6;
  assign _05_ = current_state == 4'h7;
  assign _06_ = current_state == 4'h8;
  assign _07_ = current_state == 4'h9;
  assign _08_ = current_state == 4'ha;
  assign _09_ = current_state == 4'hb;
  assign _10_ = current_state == 4'hc;
  function [3:0] \407 ;
    input [3:0] a;
    input [51:0] b;
    input [12:0] s;
    (* parallel_case *)
    casez (s)
      13'b????????????1:
        \407  = b[3:0];
      13'b???????????1?:
        \407  = b[7:4];
      13'b??????????1??:
        \407  = b[11:8];
      13'b?????????1???:
        \407  = b[15:12];
      13'b????????1????:
        \407  = b[19:16];
      13'b???????1?????:
        \407  = b[23:20];
      13'b??????1??????:
        \407  = b[27:24];
      13'b?????1???????:
        \407  = b[31:28];
      13'b????1????????:
        \407  = b[35:32];
      13'b???1?????????:
        \407  = b[39:36];
      13'b??1??????????:
        \407  = b[43:40];
      13'b?1???????????:
        \407  = b[47:44];
      13'b1????????????:
        \407  = b[51:48];
      default:
        \407  = a;
    endcase
  endfunction
  assign _11_ = \407 (4'hf, 52'hdcba987654321, { _10_, _09_, _08_, _07_, _06_, _05_, _04_, _03_, _02_, _01_, _00_, _87_, _86_ });
  always @(posedge clock)
    _12_ <= next_state;
  assign _13_ = ~ reset;
  always @*
    if (_13_) _14_ = _83_;
  assign _15_ = ~ reset;
  always @*
    if (_15_) _16_ = _84_;
  always @(posedge clock)
    _17_ <= _48_;
  always @(posedge clock)
    _18_ <= _49_;
  always @(posedge clock)
    _19_ <= _50_;
  always @(posedge clock)
    _20_ <= _51_;
  always @(posedge clock)
    _21_ <= _52_;
  always @(posedge clock)
    _22_ <= _53_;
  always @(posedge clock)
    _23_ <= _54_;
  always @(posedge clock)
    _24_ <= _55_;
  always @(posedge clock)
    _25_ <= _56_;
  always @(posedge clock)
    _26_ <= _57_;
  always @(posedge clock)
    _27_ <= _58_;
  always @(posedge clock)
    _28_ <= _59_;
  always @(posedge clock)
    _29_ <= _60_;
  always @(posedge clock)
    _30_ <= _61_;
  always @(posedge clock)
    _31_ <= _62_;
  always @(posedge clock)
    _32_ <= _63_;
  always @(posedge clock)
    _33_ <= _64_;
  always @(posedge clock)
    _34_ <= _65_;
  assign current_state = _12_;
  assign next_state = _85_;
  assign first_byte = _14_;
  assign second_byte = _16_;
  assign pc_clr = _17_;
  assign pc_ld = _18_;
  assign pc_inc = _19_;
  assign ir_ld = _20_;
  assign i_rd = _21_;
  assign leds = _11_;
  assign d_addr = _22_;
  assign d_rd = _23_;
  assign d_wr = _24_;
  assign rf_s1 = _25_;
  assign rf_s0 = _26_;
  assign rf_w_data = second_byte;
  assign rf_w_addr = _27_;
  assign rf_rp_addr = _28_;
  assign rf_rq_addr = _29_;
  assign rf_w_wr = _30_;
  assign rf_rp_rd = _31_;
  assign rf_rq_rd = _32_;
  assign alu_s0 = _33_;
  assign alu_s1 = _34_;
endmodule

module ir(clock, ir_data_in, ir_ld, ir_data_out);
  wire [7:0] _0_;
  reg [7:0] _1_ = 8'hzz;
  input clock;
  wire clock;
  input [7:0] ir_data_in;
  wire [7:0] ir_data_in;
  output [7:0] ir_data_out;
  wire [7:0] ir_data_out;
  input ir_ld;
  wire ir_ld;
  assign _0_ = ir_ld ? ir_data_in : _1_;
  always @(posedge clock)
    _1_ <= _0_;
  assign ir_data_out = _1_;
endmodule

module muxf(s1, s0, ans, d_r_data, rf_w_data, w_data);
  wire _0_;
  wire _1_;
  wire _2_;
  wire [7:0] _3_;
  input [7:0] ans;
  wire [7:0] ans;
  input [7:0] d_r_data;
  wire [7:0] d_r_data;
  input [7:0] rf_w_data;
  wire [7:0] rf_w_data;
  input s0;
  wire s0;
  input s1;
  wire s1;
  wire [1:0] s1_s0;
  output [7:0] w_data;
  wire [7:0] w_data;
  assign _0_ = s1_s0 == 2'h0;
  assign _1_ = s1_s0 == 2'h1;
  assign _2_ = s1_s0 == 2'h2;
  function [7:0] \471 ;
    input [7:0] a;
    input [23:0] b;
    input [2:0] s;
    (* parallel_case *)
    casez (s)
      3'b??1:
        \471  = b[7:0];
      3'b?1?:
        \471  = b[15:8];
      3'b1??:
        \471  = b[23:16];
      default:
        \471  = a;
    endcase
  endfunction
  assign _3_ = \471 (8'hzz, { rf_w_data, d_r_data, ans }, { _2_, _1_, _0_ });
  assign s1_s0 = { s1, s0 };
  assign w_data = _3_;
endmodule

module pc(clock, pc_inc, pc_clr, pc_ld, ir_inc, i_addr);
  wire [7:0] _0_;
  wire [7:0] _1_;
  wire [7:0] _2_;
  wire [7:0] _3_;
  wire [7:0] _4_;
  wire [7:0] _5_;
  reg [7:0] _6_ = 8'h00;
  input clock;
  wire clock;
  output [7:0] i_addr;
  wire [7:0] i_addr;
  input [7:0] ir_inc;
  wire [7:0] ir_inc;
  input pc_clr;
  wire pc_clr;
  wire [7:0] pc_count;
  input pc_inc;
  wire pc_inc;
  input pc_ld;
  wire pc_ld;
  assign _0_ = pc_count + 8'h01;
  assign _1_ = pc_count + ir_inc;
  assign _2_ = _1_ - 8'h01;
  assign _3_ = pc_ld ? _2_ : pc_count;
  assign _4_ = pc_clr ? 8'h00 : _3_;
  assign _5_ = pc_inc ? _0_ : _4_;
  always @(posedge clock)
    _6_ <= _5_;
  assign pc_count = _6_;
  assign i_addr = pc_count;
endmodule

module po(rf_s0, rf_s1, rf_w_data, d_r_data, rf_w_wr, rf_rp_rd, rf_rq_rd, clock, rf_w_addr, rf_rp_addr, rf_rq_addr, alu_s0, alu_s1, rf_rp_zero, d_w_data);
  wire [7:0] _0_;
  wire [7:0] _1_;
  wire [7:0] _2_;
  wire _3_;
  wire [7:0] _4_;
  wire \alu_0:160 ;
  wire [7:0] \alu_0:161 ;
  input alu_s0;
  wire alu_s0;
  input alu_s1;
  wire alu_s1;
  wire [7:0] ans;
  input clock;
  wire clock;
  input [7:0] d_r_data;
  wire [7:0] d_r_data;
  output [7:0] d_w_data;
  wire [7:0] d_w_data;
  wire [7:0] \muxf_0:151 ;
  wire [7:0] \regf_0:154 ;
  wire [7:0] \regf_0:155 ;
  input [3:0] rf_rp_addr;
  wire [3:0] rf_rp_addr;
  input rf_rp_rd;
  wire rf_rp_rd;
  output rf_rp_zero;
  wire rf_rp_zero;
  input [3:0] rf_rq_addr;
  wire [3:0] rf_rq_addr;
  input rf_rq_rd;
  wire rf_rq_rd;
  input rf_s0;
  wire rf_s0;
  input rf_s1;
  wire rf_s1;
  input [3:0] rf_w_addr;
  wire [3:0] rf_w_addr;
  input [7:0] rf_w_data;
  wire [7:0] rf_w_data;
  input rf_w_wr;
  wire rf_w_wr;
  wire [7:0] rp_data;
  wire [7:0] rq_data;
  wire [7:0] w_data;
  alu alu_0 (
    .a(rp_data),
    .ans(_4_),
    .b(rq_data),
    .rp_zero(_3_),
    .s0(alu_s0),
    .s1(alu_s1)
  );
  muxf muxf_0 (
    .ans(ans),
    .d_r_data(d_r_data),
    .rf_w_data(rf_w_data),
    .s0(rf_s0),
    .s1(rf_s1),
    .w_data(_0_)
  );
  regf regf_0 (
    .clock(clock),
    .rp_addr(rf_rp_addr),
    .rp_data(_2_),
    .rp_rd(rf_rp_rd),
    .rq_addr(rf_rq_addr),
    .rq_data(_1_),
    .rq_rd(rf_rq_rd),
    .w_addr(rf_w_addr),
    .w_data(w_data),
    .w_wr(rf_w_wr)
  );
  assign ans = \alu_0:161 ;
  assign rp_data = \regf_0:155 ;
  assign rq_data = \regf_0:154 ;
  assign w_data = \muxf_0:151 ;
  assign \muxf_0:151  = _0_;
  assign \regf_0:154  = _1_;
  assign \regf_0:155  = _2_;
  assign \alu_0:160  = _3_;
  assign \alu_0:161  = _4_;
  assign rf_rp_zero = \alu_0:160 ;
  assign d_w_data = rp_data;
endmodule

module regf(w_addr, rp_addr, rq_addr, w_wr, rp_rd, rq_rd, clock, w_data, rq_data, rp_data);
  reg [7:0] _0_;
  reg [7:0] _1_;
  wire [167:0] _2_;
  wire [7:0] _3_;
  wire [167:0] _4_;
  wire [7:0] _5_;
  input clock;
  wire clock;
  input [3:0] rp_addr;
  wire [3:0] rp_addr;
  output [7:0] rp_data;
  wire [7:0] rp_data;
  input rp_rd;
  wire rp_rd;
  input [3:0] rq_addr;
  wire [3:0] rq_addr;
  output [7:0] rq_data;
  wire [7:0] rq_data;
  input rq_rd;
  wire rq_rd;
  input [3:0] w_addr;
  wire [3:0] w_addr;
  input [7:0] w_data;
  wire [7:0] w_data;
  input w_wr;
  wire w_wr;
  reg [7:0] rf [20:0];
  always @(posedge clock) begin
    if (w_wr)
      rf[{ 1'h0, w_addr }] <= w_data;
  end
  assign _5_ = rf[{ 1'h0, rq_addr }];
  assign _3_ = rf[{ 1'h0, rp_addr }];
  always @*
    if (rq_rd) _0_ = _5_;
  always @*
    if (rp_rd) _1_ = _3_;
  assign rq_data = _0_;
  assign rp_data = _1_;
endmodule

module uc(clock, reset, i_data, rf_rp_zero, i_addr, i_rd, leds, d_addr, d_rd, d_wr, rf_w_wr, rf_rp_rd, rf_rq_rd, rf_w_addr, rf_rp_addr, rf_rq_addr, rf_s0, rf_s1, rf_w_data, alu_s0, alu_s1
);
  wire _00_;
  wire _01_;
  wire _02_;
  wire _03_;
  wire _04_;
  wire [3:0] _05_;
  wire [7:0] _06_;
  wire _07_;
  wire _08_;
  wire _09_;
  wire _10_;
  wire [7:0] _11_;
  wire [3:0] _12_;
  wire [3:0] _13_;
  wire [3:0] _14_;
  wire _15_;
  wire _16_;
  wire _17_;
  wire _18_;
  wire _19_;
  wire [7:0] _20_;
  wire [7:0] _21_;
  output alu_s0;
  wire alu_s0;
  output alu_s1;
  wire alu_s1;
  wire \bc_0:100 ;
  wire \bc_0:101 ;
  wire \bc_0:102 ;
  wire \bc_0:83 ;
  wire \bc_0:84 ;
  wire \bc_0:85 ;
  wire \bc_0:86 ;
  wire \bc_0:87 ;
  wire [3:0] \bc_0:88 ;
  wire [7:0] \bc_0:89 ;
  wire \bc_0:90 ;
  wire \bc_0:91 ;
  wire \bc_0:92 ;
  wire \bc_0:93 ;
  wire [7:0] \bc_0:94 ;
  wire [3:0] \bc_0:95 ;
  wire [3:0] \bc_0:96 ;
  wire [3:0] \bc_0:97 ;
  wire \bc_0:98 ;
  wire \bc_0:99 ;
  input clock;
  wire clock;
  output [7:0] d_addr;
  wire [7:0] d_addr;
  output d_rd;
  wire d_rd;
  output d_wr;
  wire d_wr;
  output [7:0] i_addr;
  wire [7:0] i_addr;
  input [7:0] i_data;
  wire [7:0] i_data;
  output i_rd;
  wire i_rd;
  wire [7:0] \ir_0:146 ;
  wire [7:0] ir_data_out;
  wire ir_ld;
  output [3:0] leds;
  wire [3:0] leds;
  wire [7:0] \pc_0:143 ;
  wire pc_clr;
  wire pc_inc;
  wire pc_ld;
  input reset;
  wire reset;
  output [3:0] rf_rp_addr;
  wire [3:0] rf_rp_addr;
  output rf_rp_rd;
  wire rf_rp_rd;
  input rf_rp_zero;
  wire rf_rp_zero;
  output [3:0] rf_rq_addr;
  wire [3:0] rf_rq_addr;
  output rf_rq_rd;
  wire rf_rq_rd;
  output rf_s0;
  wire rf_s0;
  output rf_s1;
  wire rf_s1;
  output [3:0] rf_w_addr;
  wire [3:0] rf_w_addr;
  output [7:0] rf_w_data;
  wire [7:0] rf_w_data;
  output rf_w_wr;
  wire rf_w_wr;
  bc bc_0 (
    .alu_s0(_18_),
    .alu_s1(_19_),
    .clock(clock),
    .d_addr(_06_),
    .d_rd(_07_),
    .d_wr(_08_),
    .i_rd(_04_),
    .ir_data_out(ir_data_out),
    .ir_ld(_03_),
    .leds(_05_),
    .pc_clr(_00_),
    .pc_inc(_02_),
    .pc_ld(_01_),
    .reset(reset),
    .rf_rp_addr(_13_),
    .rf_rp_rd(_16_),
    .rf_rp_zero(rf_rp_zero),
    .rf_rq_addr(_14_),
    .rf_rq_rd(_17_),
    .rf_s0(_10_),
    .rf_s1(_09_),
    .rf_w_addr(_12_),
    .rf_w_data(_11_),
    .rf_w_wr(_15_)
  );
  ir ir_0 (
    .clock(clock),
    .ir_data_in(i_data),
    .ir_data_out(_21_),
    .ir_ld(ir_ld)
  );
  pc pc_0 (
    .clock(clock),
    .i_addr(_20_),
    .ir_inc(ir_data_out),
    .pc_clr(pc_clr),
    .pc_inc(pc_inc),
    .pc_ld(pc_ld)
  );
  assign pc_ld = \bc_0:84 ;
  assign pc_clr = \bc_0:83 ;
  assign pc_inc = \bc_0:85 ;
  assign ir_ld = \bc_0:86 ;
  assign ir_data_out = \ir_0:146 ;
  assign \bc_0:83  = _00_;
  assign \bc_0:84  = _01_;
  assign \bc_0:85  = _02_;
  assign \bc_0:86  = _03_;
  assign \bc_0:87  = _04_;
  assign \bc_0:88  = _05_;
  assign \bc_0:89  = _06_;
  assign \bc_0:90  = _07_;
  assign \bc_0:91  = _08_;
  assign \bc_0:92  = _09_;
  assign \bc_0:93  = _10_;
  assign \bc_0:94  = _11_;
  assign \bc_0:95  = _12_;
  assign \bc_0:96  = _13_;
  assign \bc_0:97  = _14_;
  assign \bc_0:98  = _15_;
  assign \bc_0:99  = _16_;
  assign \bc_0:100  = _17_;
  assign \bc_0:101  = _18_;
  assign \bc_0:102  = _19_;
  assign \pc_0:143  = _20_;
  assign \ir_0:146  = _21_;
  assign i_addr = \pc_0:143 ;
  assign i_rd = \bc_0:87 ;
  assign leds = \bc_0:88 ;
  assign d_addr = \bc_0:89 ;
  assign d_rd = \bc_0:90 ;
  assign d_wr = \bc_0:91 ;
  assign rf_w_wr = \bc_0:98 ;
  assign rf_rp_rd = \bc_0:99 ;
  assign rf_rq_rd = \bc_0:100 ;
  assign rf_w_addr = \bc_0:95 ;
  assign rf_rp_addr = \bc_0:96 ;
  assign rf_rq_addr = \bc_0:97 ;
  assign rf_s0 = \bc_0:93 ;
  assign rf_s1 = \bc_0:92 ;
  assign rf_w_data = \bc_0:94 ;
  assign alu_s0 = \bc_0:101 ;
  assign alu_s1 = \bc_0:102 ;
endmodule

module vahid6i(clock, reset, D_R_data, I_data, led_clock, leds, D_addr, D_rd, D_wr, D_W_data, I_rd, I_addr);
  wire [7:0] _00_;
  wire [3:0] _01_;
  wire [3:0] _02_;
  wire [3:0] _03_;
  wire _04_;
  wire _05_;
  wire [7:0] _06_;
  wire _07_;
  wire _08_;
  wire _09_;
  wire [7:0] _10_;
  wire _11_;
  wire [3:0] _12_;
  wire [7:0] _13_;
  wire _14_;
  wire _15_;
  wire _16_;
  wire _17_;
  wire _18_;
  input [7:0] D_R_data;
  wire [7:0] D_R_data;
  output [7:0] D_W_data;
  wire [7:0] D_W_data;
  output [7:0] D_addr;
  wire [7:0] D_addr;
  output D_rd;
  wire D_rd;
  output D_wr;
  wire D_wr;
  output [7:0] I_addr;
  wire [7:0] I_addr;
  input [7:0] I_data;
  wire [7:0] I_data;
  output I_rd;
  wire I_rd;
  wire alu_s0;
  wire alu_s1;
  input clock;
  wire clock;
  output led_clock;
  wire led_clock;
  output [3:0] leds;
  wire [3:0] leds;
  wire \po_0:59 ;
  wire [7:0] \po_0:60 ;
  input reset;
  wire reset;
  wire [3:0] rf_rp_addr;
  wire rf_rp_rd;
  wire rf_rp_zero;
  wire [3:0] rf_rq_addr;
  wire rf_rq_rd;
  wire rf_s0;
  wire rf_s1;
  wire [3:0] rf_w_addr;
  wire [7:0] rf_w_data;
  wire rf_w_wr;
  wire [3:0] \uc_0:10 ;
  wire [7:0] \uc_0:11 ;
  wire \uc_0:12 ;
  wire \uc_0:13 ;
  wire \uc_0:14 ;
  wire \uc_0:15 ;
  wire \uc_0:16 ;
  wire [3:0] \uc_0:17 ;
  wire [3:0] \uc_0:18 ;
  wire [3:0] \uc_0:19 ;
  wire \uc_0:20 ;
  wire \uc_0:21 ;
  wire [7:0] \uc_0:22 ;
  wire \uc_0:23 ;
  wire \uc_0:24 ;
  wire [7:0] \uc_0:8 ;
  wire \uc_0:9 ;
  po po_0 (
    .alu_s0(alu_s0),
    .alu_s1(alu_s1),
    .clock(clock),
    .d_r_data(D_R_data),
    .d_w_data(_10_),
    .rf_rp_addr(rf_rp_addr),
    .rf_rp_rd(rf_rp_rd),
    .rf_rp_zero(_09_),
    .rf_rq_addr(rf_rq_addr),
    .rf_rq_rd(rf_rq_rd),
    .rf_s0(rf_s0),
    .rf_s1(rf_s1),
    .rf_w_addr(rf_w_addr),
    .rf_w_data(rf_w_data),
    .rf_w_wr(rf_w_wr)
  );
  uc uc_0 (
    .alu_s0(_07_),
    .alu_s1(_08_),
    .clock(clock),
    .d_addr(_13_),
    .d_rd(_14_),
    .d_wr(_15_),
    .i_addr(_00_),
    .i_data(I_data),
    .i_rd(_11_),
    .leds(_12_),
    .reset(reset),
    .rf_rp_addr(_02_),
    .rf_rp_rd(_17_),
    .rf_rp_zero(rf_rp_zero),
    .rf_rq_addr(_03_),
    .rf_rq_rd(_18_),
    .rf_s0(_04_),
    .rf_s1(_05_),
    .rf_w_addr(_01_),
    .rf_w_data(_06_),
    .rf_w_wr(_16_)
  );
  assign rf_w_wr = \uc_0:14 ;
  assign rf_rp_rd = \uc_0:15 ;
  assign rf_rq_rd = \uc_0:16 ;
  assign rf_w_addr = \uc_0:17 ;
  assign rf_rp_addr = \uc_0:18 ;
  assign rf_rq_addr = \uc_0:19 ;
  assign rf_rp_zero = \po_0:59 ;
  assign rf_s0 = \uc_0:20 ;
  assign rf_s1 = \uc_0:21 ;
  assign rf_w_data = \uc_0:22 ;
  assign alu_s0 = \uc_0:23 ;
  assign alu_s1 = \uc_0:24 ;
  assign \uc_0:8  = _00_;
  assign \uc_0:9  = _11_;
  assign \uc_0:10  = _12_;
  assign \uc_0:11  = _13_;
  assign \uc_0:12  = _14_;
  assign \uc_0:13  = _15_;
  assign \uc_0:14  = _16_;
  assign \uc_0:15  = _17_;
  assign \uc_0:16  = _18_;
  assign \uc_0:17  = _01_;
  assign \uc_0:18  = _02_;
  assign \uc_0:19  = _03_;
  assign \uc_0:20  = _04_;
  assign \uc_0:21  = _05_;
  assign \uc_0:22  = _06_;
  assign \uc_0:23  = _07_;
  assign \uc_0:24  = _08_;
  assign \po_0:59  = _09_;
  assign \po_0:60  = _10_;
  assign led_clock = clock;
  assign leds = \uc_0:10 ;
  assign D_addr = \uc_0:11 ;
  assign D_rd = \uc_0:12 ;
  assign D_wr = \uc_0:13 ;
  assign D_W_data = \po_0:60 ;
  assign I_rd = \uc_0:9 ;
  assign I_addr = \uc_0:8 ;
endmodule
